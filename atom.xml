<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life &amp; Note</title>
  
  <subtitle>winterTTr Blog</subtitle>
  <link href="http://winterttr.me/atom.xml" rel="self"/>
  
  <link href="http://winterttr.me/"/>
  <updated>2023-01-23T07:17:43.152Z</updated>
  <id>http://winterttr.me/</id>
  
  <author>
    <name>winterTTr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023 中国新年</title>
    <link href="http://winterttr.me/2023/01/23/Chinese-New-Year-2023/"/>
    <id>http://winterttr.me/2023/01/23/Chinese-New-Year-2023/</id>
    <published>2023-01-23T15:09:00.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>大家2023年，新春快乐</p><span id="more"></span><h2 id="出乎意料的2022"><a href="#出乎意料的2022" class="headerlink" title="出乎意料的2022"></a>出乎意料的2022</h2><p>2022，在一顿手忙脚乱中结束了，是的，毫无疑问的我也是杨过了，出乎意料的放开，出乎意料的发烧，同时也有其他的出乎意料。好在，一切都有惊无险，就这样匆匆忙忙的2022过去了。</p><p>疫情的放开，可以说是结束了一个时代，健康码没有了，扫码也没有了，行程码也没有了，去过三年的一切一切，都在短短几天到几周之内完全清零。回想过去的三年，就像是一场梦，梦醒了，无论心情如何，生活依旧要继续。</p><h2 id="新年计划"><a href="#新年计划" class="headerlink" title="新年计划"></a>新年计划</h2><p>毫无疑问，之前几年的计划，没什么实现的，所以，今年的计划，形式感大于实际效果吧，但是还是走走过场：</p><ul><li>减脂：人老了，似乎只要不运动，肚子就在慢慢长大，以前三年实在是懒惰，新的一年，希望有所改善。</li><li>多做，也要多说，但是提高说的质量，减少废话</li><li>希望重新拾起写作的习惯</li><li>读点书吧</li><li>或许工作重心不得不有些改变了，不过，还是希望保持工作的热情</li><li>希望家人在后疫情的时代，一切安康</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;大家2023年，新春快乐&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://winterttr.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="日常" scheme="http://winterttr.me/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="胡思乱想" scheme="http://winterttr.me/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>2019 新的一年</title>
    <link href="http://winterttr.me/2019/02/04/new-chinese-year/"/>
    <id>http://winterttr.me/2019/02/04/new-chinese-year/</id>
    <published>2019-02-04T14:50:52.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>大家2019年，新春快乐</p><span id="more"></span><h2 id="忙碌的2018"><a href="#忙碌的2018" class="headerlink" title="忙碌的2018"></a>忙碌的2018</h2><p>2018年是非常忙碌的一年，从博客更新上就可以看出来，一年一篇都没写，哈哈。</p><p>项目组的工作内容从以前的azure cloud service更新到了kubernetes环境，docker, kubernetes, istio一路走过来，收获还是非常多的。新一代的微服务框架，的确在构建企业服务的能力方面，具有非常多的自由度，当然，更加有感开源社区的繁荣和google这个公司在开源界的影响力。</p><h2 id="新年计划"><a href="#新年计划" class="headerlink" title="新年计划"></a>新年计划</h2><p>新的一年，无论是惯例还是仪式感，都要写点啥，那就从回顾一下之前的计划开始好了：</p><ul><li>减脂：2018基本上坚持到一周三次健身吧，虽然体脂好像没啥太大的变化，不过至少运动量的基础达到了。传说的6块腹肌依旧遥遥无期，所以希望2019继续保持健身量。</li><li>多听播客：算是对得起买了新的sony降噪豆吧，降低低头看手机的时间，最近订阅了几个有意思的播客，算是体会到另一种“阅读”体验</li><li>继续保持写游记的习惯：忙成狗的我真的是对不起这个目标，虽然游记可能写的少了，希望能够增加博客的内容，不止是游记。写作方面，希望在新的一年重启日记习惯，具体使用什么软件载体还在研究，ios的自带笔记应用，bear或者evernote呢？</li><li>提升摄影水平：已经升级到设备A6500和Sony 1670F4，对这个设备非常满意，也成为了现在旅行的主力机器。或许可以考虑研究一下视频录像和VLOG。</li><li>提升读书习惯：我只想说kindle真的是吃灰了很久了，非常愧对这个设备。所以目标是先把已经买的纸书读完了吧，需要重启读书计划</li><li>考虑做一个ios的应用：这个计划暂时搁浅了，太忙了，呵呵，暂时还是以继续实现效率应用为主吧，继续使用omnifocus作为主力工具吧</li><li>工作上保持稳定：工作肯定还是继续忙碌的一年，希望工作上能到得到新老板的认同，工作上能有新的提升吧。</li><li>人生的下一步：娶到可爱的黄胖胖</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;大家2019年，新春快乐&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://winterttr.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="日常" scheme="http://winterttr.me/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="胡思乱想" scheme="http://winterttr.me/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>用GTD的思路记账</title>
    <link href="http://winterttr.me/2017/05/23/accouting-using-gtd-way/"/>
    <id>http://winterttr.me/2017/05/23/accouting-using-gtd-way/</id>
    <published>2017-05-23T14:31:02.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>用手机记账，一直存在着很多的痛点。所以在这篇文章中，给大家提供一种新的思路，来改进记账的工作流，利用已有的一些效率工具缓解记账流程中的一些痛点。</p><span id="more"></span><h1 id="记账究竟是记什么"><a href="#记账究竟是记什么" class="headerlink" title="记账究竟是记什么"></a>记账究竟是记什么</h1><h2 id="交易-transaction-定义了什么"><a href="#交易-transaction-定义了什么" class="headerlink" title="交易(transaction)定义了什么"></a>交易(transaction)定义了什么</h2><p>在记账的时候，每一条交易记录了什么？<br>或者换个角度来说，“帐”单里面的条目究竟定义和记录了什么。<br>我习惯会用下面的公式来给出一种解释：</p><p>$$ (d_1,d_2 … d_n ) \iff m$$</p><p>其中$d_x$代表数据维度，$m$代表一个数值。</p><p>所以：</p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>每一条“账目”，就是在一定的数据纬度上分割的数值。 </p>            <i class="fa fa-quote-right"></i>          </blockquote><p>这样的公式和解释似乎比较抽象，所以可以用一个例子说明一下。首先定义几个记账中常用的数据纬度，例如，时间、地点、商家等，而数值也就是消费的金额。于是可以得到下面这样的一种定义</p><p>$$(时间, 地点, 商家) \iff 消费金额 $$</p><p>好了，在这个定义的下，账单的结果大概率会变成下面这样：</p><ul><li><strong>(2017年6月1日 12:00 PM, 大悦城, 将太无二 ) -&gt; 100</strong></li><li><strong>(2017年6月1日 15:00 PM, 大悦城, 金逸影城 ) -&gt; 60</strong></li></ul><p>基于这个简单的例子，大家对上面记账条目的公式应该了直观的理解。联系到实际中记账的各种软件中，会发现很多都是基于这样的模型去定义记账的内容。</p><p>用我个人习惯使用<em>MoneyWiz 2</em>举例，下图中的是<em>MoneyWzi 2</em>中的<code>交易布局</code>界面，在这个界面的设置基本上也展示了<em>MoneyWzi 2</em>中对记账条目的定义。</p><img src="https://winterttrgithubio.blob.core.windows.net/images/2017-05-23-accouting-using-gtd-way/MoneyWiz2-layout.png" class="" width="300"><h2 id="账目报告展示了什么"><a href="#账目报告展示了什么" class="headerlink" title="账目报告展示了什么"></a>账目报告展示了什么</h2><p>基于前面的数据模型定义，进一步来说，对于很多软件中的的<code>财报</code>、<code>月度总结</code>之类的界面，就是在某一个或者多个数据维度上对最终数值进行的聚合(aggregation)操作。</p><p>依旧用上面的例子，在<em>2017年6月1日</em>的日度消费总结，就是针对所有的数据在<code>时间</code>维度等于<em>2017年6月1日</em>的条目，对数值（消费金额）列进行<code>加</code>操作的聚合，也就是会变成160。<br>虽然这只是个最简单的例子，对于很多记账软件来讲，更加复杂的报告，基本上是在两个方面做文章：</p><ul><li>数据维度的划分能力，例如：按月、按周、按照消费商家等等等</li><li>数据聚合方法，这方面做文章的并不多，在实际中会发现，很多时候的复杂报告，其实只是使用了简单的<code>加</code>操作</li></ul><h1 id="为什么我需要改进记账流程"><a href="#为什么我需要改进记账流程" class="headerlink" title="为什么我需要改进记账流程"></a>为什么我需要改进记账流程</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p><strong>WHY</strong> </p>            <i class="fa fa-quote-right"></i>          </blockquote><p>谈了这么多的定义，下面来说说，为什么我们需要改进记账流程。</p><p>很多时候大家会把记账和省钱关联在一起，但实际上，更多人记账的目的，只是在一定程度上了解自己的消费内容和结构，这就和记录体重、每天的步数一样。<br>其实问过很多身边的朋友，都说使用过记账软件，短的几天几周，长的半年，最后都都没有坚持下来。大多数人没办法坚持下来，很多时候在抱怨记账中的一些痛点：</p><p>其中经常提到的一些话题：</p><ol><li>记账太麻烦了</li><li>消费的时候没功夫记账，等过后也就忘了</li><li>现场没时间输入呀，记账软件里面的条目太多懒得选</li><li>随着丢账、乱账的增多，后来觉得记的东西也没啥用，就懒得记了</li></ol><p>其实在这些问题中，会发现，大家抱怨的主要在于记账本身的<strong>麻烦</strong>，这个麻烦引起了一系列的问题，最终变成放弃。</p><p>根据上面对记账数据模型的分析，仔细分一下其中的这个<strong>麻烦</strong>，显然并不是记录数字本身麻烦，也就是不在于公式右面的的<code>数值</code>，基本上主要麻烦在<code>数据维度</code>这个问题上。</p><ol><li>很显然，在消费的当时，很难马上暂停身边所有的事情1分钟，然后输入一下这个消费的详细数据维度和消费金额</li><li>记账软件在努力<strong>加速</strong>这个过程，例如通过iOS的通知中心可以输入，但是再输入的时候依旧需要选择例如类别等等</li><li>同时，记账软件试图<strong>简化</strong>这个过程，例如减少输入时候的数据维度，例如在输入时候只选择大类别等办法，但是这样的交易记录会严重造成后期报表可能很难进行精确统计。</li></ol><p>所以，交易记录的及时性和完整性，存在着一种矛盾。如何缓解这个矛盾呢？</p><h1 id="利用GTD的思路重新定义记账流程"><a href="#利用GTD的思路重新定义记账流程" class="headerlink" title="利用GTD的思路重新定义记账流程"></a>利用GTD的思路重新定义记账流程</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p><strong>HOW</strong> </p>            <i class="fa fa-quote-right"></i>          </blockquote><p>在GTD的核心步骤分为如下几部：</p><ol><li>Capture - Collect what has your attension: 收集</li><li>Clarify - Process what I mean: 整理</li><li>Organize - Put it where it belongs: 组织</li><li>Engage - Simply do: 执行</li><li>Reflect - Review frequently: 回顾</li></ol><p>在GTD的流程中，有一个很重要的思路，就是将收集与整理&#x2F;组织分开。因为定义、分析、分解一个任务内容，很难一次性完成。所以，首先采用快速的方式去清空你的大脑里的所有任务事项（收集），然后再静下心来，一条一条的分析、整理、分配任务内容(整理和组织)。利用快速简单的采集流程完成任务收集（解决及时性），利用整理组织丰富任务内容（解决完整性）。</p><p>这里可以发现，这与记账中的痛点具有很高的相似性，而大家记账之所以纠结于记账过程的复杂和麻烦，是因为期望在一次行为中完成记账条目的收集和整理两个过程。所以，利用GTD的思路，将收集和整理的两个步骤完全分离开，改进记账的工作流程，可以用一种新的思路来解决手机记账的痛点。</p><p>好了，我们的目标是一个完整详细的账目记录，<strong>完整详细</strong>这个词体现在数据定义上，其实就是丰富的数据维度这个层面，于是将记账分为收集和整理两个步骤，就是</p><ol><li>收集交易记录的过程中，最大程度的减少数据维度的输入，只记录交易金额和必要的（自动的）数据维度</li><li>整理过程中，丰富和完整所有缺少的数据维度内容，从而完成最终的交易记录</li></ol><p>进一步来分析，减少收集阶段的数据维度，如何做到最少？要回答这问题，有一个非常重要的因素，那就是收集和整理的行为周期是什么？</p><ol><li>采用天为周期<br>如果采用天为周期，那么我们可以将数据维度降到最低，在我的实践中，可以将数据维度减少到只有<code>时间</code>这个维度。这个前提是因为一个人可以利用短期回忆快速的回顾一天的内容。举个例子，如果我有一条记录<code>(2017年6月1日 10:30) -&gt; 20</code>，虽然数据维度降低到只有一个，但是因为是当天发生的事情，所以可以很快的回忆起在这个时间段发生的这笔消费究竟是什么。于是，在采集阶段只要记录时间和金额就可以完成。同时，利用手机的特点，时间这个维度是自动采集的，也就是说我们完全可以变成只输入一个金额这么简单。那么，整理就变成了每天晚上的一个仪式性行为，每天晚上用5-10分钟，回忆当天的所有消费记录，并将完整的数据维度补充全面添加到记账软件或者记账本中。</li><li>采用周为周期<br>如果采用周作为周期，为了记忆的唤醒，需要增加数据维度，例如增加消费地点。因为周这个单位往往对于短期记忆来说太过长久，只记录一个时间，可能已经很难回忆起当时为什么花了这笔钱。增加消费地点维度，可以更大程度上唤醒消费记忆。同时，每周末利用1个小时左右的时间，整理当周的消费。</li></ol><p>当然，从实践的结果来看，个人依旧是推荐以天为单位，这样可以最大程度减少收集阶段的维度，同时也降低整理时间的疲劳度。</p><h1 id="利用现有的工具实现工作流"><a href="#利用现有的工具实现工作流" class="headerlink" title="利用现有的工具实现工作流"></a>利用现有的工具实现工作流</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p><strong>WHAT</strong> </p>            <i class="fa fa-quote-right"></i>          </blockquote><p>个人的实践，采用了天为单位，初衷还是最大程度减少手机阶段的数据维度。</p><ul><li><p>对于采集阶段，利用了现有的效率类软件，考虑到收集过程最好连应用都不用打开就可以做到，所以采用通知中心的快速输入会更好。支持通知中心的输入，且可以自定义流程的，自然就想到了<code>workflow</code>。下面利用<code>workflow</code>做了这个通知中心的收集程序，收集输入金额到reminder中，同时里面可以配置成支持多币种和地点自动采集。但是在按天收集这个频率下，这些信息并不是很重要，所以下面的工作流做成可以配置的，可以在出国旅行或者其他场景下开启，默认是关闭状态</p>  <blockquote><footer><strong>winterTT</strong><cite><a href="https://workflow.is/workflows/2056dfc601c146c78aafcd41fc632d0c">消费记录Workflow</a></cite></footer></blockquote></li><li><p>对于整理阶段，由于我的<code>workflow</code>是加到特定的reminder中，同时<code>omnifocus</code>会自动采集对应reminder中的数据。所以，每晚可以打开<code>omnifocus</code>，在收件箱中看到所有的当天交易记录。然后，在每晚的例行或者仪式中，清空<code>收件箱</code>中的交易内容，整理到<code>MoneyWiz 2</code>中。</p></li></ul><p>最终实现的效果，类似如下的演示</p><img src="https://winterttrgithubio.blob.core.windows.net/images/2017-05-23-accouting-using-gtd-way/accouting-workflow.gif" class="" width="300"><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>或许你觉得说了这么多，最终无非就是做了一个简单的<code>workflow</code>，是的，从结果上看的确如此。<br>不过，个人认为，效率类的改进，并不只是依赖于一个革命性的创新，很多时候更重要的是从观念和细节出发，一些看似很小改进很多时候已经可以改变生活的体验。</p><p>很多时候，大家往往希望利用一个app来彻底解决问题，但是现实是效率的提高以及体验的提升，更多的应该在每个步骤中发挥已有工具的优势来为我们服务。<br>试问，下载到手机里的效率应用，有多少还在堆灰，有多少只打开过几次呢？对一个效率软件的最大的敬意，是将其用到你的每一个生活片段中。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;用手机记账，一直存在着很多的痛点。所以在这篇文章中，给大家提供一种新的思路，来改进记账的工作流，利用已有的一些效率工具缓解记账流程中的一些痛点。&lt;/p&gt;</summary>
    
    
    
    <category term="效率" scheme="http://winterttr.me/categories/%E6%95%88%E7%8E%87/"/>
    
    
    <category term="效率" scheme="http://winterttr.me/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="iOS" scheme="http://winterttr.me/tags/iOS/"/>
    
    <category term="应用" scheme="http://winterttr.me/tags/%E5%BA%94%E7%94%A8/"/>
    
    <category term="workflow" scheme="http://winterttr.me/tags/workflow/"/>
    
    <category term="omnifocus" scheme="http://winterttr.me/tags/omnifocus/"/>
    
    <category term="记账" scheme="http://winterttr.me/tags/%E8%AE%B0%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>新的一年 - 新的开始</title>
    <link href="http://winterttr.me/2017/02/01/Happy-New-Year/"/>
    <id>http://winterttr.me/2017/02/01/Happy-New-Year/</id>
    <published>2017-02-01T10:10:23.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>过去的一年，挑战与压力并存，无论是工作还是学业，但是各方面最后都取得了不错的结果。<br>新的一年，给自己一些新的小目标，继续努力</p><span id="more"></span><h1 id="新年新目标"><a href="#新年新目标" class="headerlink" title="新年新目标"></a>新年新目标</h1><ul><li>减脂：第一目标，过去半年各种事情，健身量明显不够，新一年一定要继续加强，最好的结果希望达到6块腹肌</li><li>继续提升日语： 可能未必能有精力过1级，但是应该加强日语词汇和单词量</li><li>继续保持写游记的习惯：今年应该会有更多的时间继续陪老婆日本深度游</li><li>提升摄影水平：是不是从提升装备开始呢，咦哈哈，依旧在A7M2和A7R2之间犹豫不决，啥时大降价呀</li><li>提升读书习惯：充分利用起来手里的kindle，不能再让他吃灰了</li><li>考虑做一个ios的应用：思路还在整理中，基本上还是锁定效率应用的范围</li><li>工作上保持稳定：希望项目本身也能正常GA并稳定一年</li></ul><p>最后，希望全家人身体健健康，新的一年，新的努力开始~~</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;过去的一年，挑战与压力并存，无论是工作还是学业，但是各方面最后都取得了不错的结果。&lt;br&gt;新的一年，给自己一些新的小目标，继续努力&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://winterttr.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="日常" scheme="http://winterttr.me/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="胡思乱想" scheme="http://winterttr.me/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>再游日本关西--濑户内海北岸游(姬路，冈山，仓敷）</title>
    <link href="http://winterttr.me/2016/07/09/travel-japan-setonaikai-north/"/>
    <id>http://winterttr.me/2016/07/09/travel-japan-setonaikai-north/</id>
    <published>2016-07-09T19:56:44.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>大多数人到日本关西，基本上都是围绕京都，奈良，大阪等等的主要旅游地段。而这次虽然依旧是关西游，但主要是一些的围绕濑户内海北岸的各种城市的小众景点游玩。姫路（ひめじ），倉敷（くらしき），岡山（おかやま）等等，让人领略到了别样的日本关西。</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/cover.jpg" alt="cover.jpg"></p><span id="more"></span><hr><h1 id="5月1日-–-京都城南宮"><a href="#5月1日-–-京都城南宮" class="headerlink" title="5月1日 – 京都城南宮"></a>5月1日 – 京都城南宮</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>京都（きょうと）城南宮（じょうなんぐう）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>很多去京都的人，大多数都会选择伏见稻荷大社，金阁寺，清水寺，袛园等等比较著名的游玩景点。不过，这次本着小众游的原则，选择了京都的城南宫。</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-jonangu-gate.jpg" alt="0501-jonangu-gate.jpg"></p><blockquote><p>都の守護と国の安泰を願って、平安遷都の際に京都の南に創建されてから１２００年。城南宮は、引越・工事・家相の心配を除く「方除（ほうよけ）の大社」と仰がれています。</p><footer><strong>城南宮（じょうなんぐう）</strong><cite><a href="http://www.jonangu.com/">www.jonangu.com</a></cite></footer></blockquote><p>城南宫为守护国都，祈求安泰之用，于1200年平安迁都的时候建造于京都的南侧。城南宫称为【消除灾难的名神社】，以消除人们对搬家、建筑作业、风水的忧虑为人们所敬仰。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-jonangu-tera.jpg" alt="0501-jonangu-tera.jpg"></p><p>当然，这次我并不是为了城南宫本身而来，而是因为城南宫旁边的「源氏物語花の庭（げんじものがたりはなのにわ）」<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-jonangu-kanban.jpg" alt="0501-jonangu-kanban.jpg"></p><p>每年的4月底5月初，正值紫藤花盛开的季节，这个时候来这里，可以看到美丽的紫藤花景观。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-jonangu-purple.jpg" alt="0501-jonangu-purple.jpg"></p><p>当然，既然是庭院，赏花只是其中一部分，更多的还是整体的庭院布景。依旧感慨日本庭院的精致程度的。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-jonangu-overview.jpg" alt="0501-jonangu-overview.jpg"></p><p>和服，绿树，青草，日本文化独有的庭院景观。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-jonangu-walk-in-trees.jpg" alt="0501-jonangu-walk-in-trees.jpg"></p><p>同时，每种植物都有详细的注明，话说浅葱真的是葱么？~ ^_^<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-jonangu-asatsuki.jpg" alt="0501-jonangu-asatsuki.jpg"></p><p>在庭院里闲游闲游完毕，想着既然来到了京都，就来刷刷景点吧。不过，咱们还是本着特立独行的态度，这次刷的是京都刚刚开幕的京都铁道博物馆。</p><hr><h1 id="5月1日-–-京都铁道博物馆"><a href="#5月1日-–-京都铁道博物馆" class="headerlink" title="5月1日 – 京都铁道博物馆"></a>5月1日 – 京都铁道博物馆</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>京都（きょうと）鉄道博物館（てつどうはくぶつかん）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-railway-word.jpg" alt="0501-railway-word.jpg"></p><p>买票倒是很方便，有自动卖票机，直接给钱拿票就可以。除了门票，因为是刚刚开馆，竟然还送了开馆纪念券，哈哈，为啥有种解锁游戏特定任务的感觉。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-railway-ticket.jpg" alt="0501-railway-ticket.jpg"></p><p>既然是铁道博物馆，最重要的角色当然就是火车了。进馆的正面就是这个车头，想必是很重要的型号之一。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-railway-223.jpg" alt="0501-railway-223.jpg"></p><p>话说铁道博物馆的内部还真是相当的庞大，有三层，各种时期的火车车头和火车设施的展示，一应俱全。如果大家有时间，还是比较推荐的。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-railway-DD51756.jpg" alt="0501-railway-DD51756.jpg"></p><p>这个是旧时期日本火车车站的小铺缩影，话说我毫不犹豫的想起了<code>昭和杂货店物语2</code>这个游戏。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-railway-shop.jpg" alt="0501-railway-shop.jpg"></p><p>来到博物馆的顶层，是有一个开放平台的，在这里正好可以鸟瞰博物馆周围的真正的铁道景观。同时，不时经过的各种列车，都可以在博物馆里找到相应的模型，真正的学以致用。可见博物馆的选址是经过认真考虑的。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0501-railway-out-rails.jpg" alt="0501-railway-out-rails.jpg"></p><hr><h1 id="5月2日-–-outlet的美食奇遇"><a href="#5月2日-–-outlet的美食奇遇" class="headerlink" title="5月2日 – outlet的美食奇遇"></a>5月2日 – outlet的美食奇遇</h1><p>说实话，今天本来只是逛逛神户的outlet买点乱七八糟的，没想到，在outlet的里面竟然遇到了传说的日本必吃冰激凌<code>Cremia</code>。没听说过的话，可以随便去微博搜一下，推荐的帖子一堆一堆的。官方地址 <a href="https://www.nissei-com.co.jp/cremia/">https://www.nissei-com.co.jp/cremia/</a><br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0502-cremia-intro.png" alt="0502-cremia-intro.png"></p><p>难怪一个小小的冰激凌需要500日元，入口即化的口感，香浓满嘴的味道，不愧为必吃美食之一。大家逛街的时候遇到，一定不能放过！！<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0502-outlet-cremia.jpg" alt="0502-outlet-cremia.jpg"></p><hr><h1 id="5月3日-–-姬路城"><a href="#5月3日-–-姬路城" class="headerlink" title="5月3日 – 姬路城"></a>5月3日 – 姬路城</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>姫路城（ひめじじょう）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>作為日本最具象徵意義,保留度最為完整的城堡，姬路城既是日本政府指定的國寶及國家特別史跡，也是日本首批世界文化遗产之一。姬路城是日本100名城之一，與熊本城、松本城合稱為日本三大名城；由於其保存度较完好（城內的天守為日本的12座現存天守之一），也被稱為「日本第一名城」。有很多時代劇和電影也在這裡進行拍攝，或以姬路城作為江戶城的象徵。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himeji-city.jpg" alt="0503-himeji-city.jpg"></p><p>终于明白，日本也有那种日本人人满为患的景点，姬路城就是个明显的情况。周围的外国旅游者并不多，但是，一片一片的日本大爷大妈，哈哈。所以，登上姬路城游览这条就放弃了。因为要等一个小时排队，对于一个已经去过大阪天守阁的人来说，并没有那么多吸引力再上一次姬路城。倒是姬路城周围的场地非常心旷神怡。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himeji-city-out.jpg" alt="0503-himeji-city-out.jpg"></p><hr><h1 id="5月3日-–-好古園"><a href="#5月3日-–-好古園" class="headerlink" title="5月3日 – 好古園"></a>5月3日 – 好古園</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>姫路城西御屋敷跡庭園好古園（こうこえん）　</p>            <i class="fa fa-quote-right"></i>          </blockquote><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejiniwa-lake.jpg" alt="0503-himejiniwa-lake.jpg"></p><p>如果说，姬路城本身并没有让人有太大的惊喜的话，好古园却是着实让人喜爱。可以说这里体现了日本庭院的精致之美。湖水，小桥，绿树，木屋，安心于其中，非常的舒服。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejiniwa-lake-2.jpg" alt="0503-himejiniwa-lake-2.jpg"></p><p>想想古代的武士住的地方，舒服起来也真是享受<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejiniwa-tingzi.jpg" alt="0503-himejiniwa-tingzi.jpg"></p><p>日本的庭院技能真是让人惊叹，如果说中国的庭院是真正的大片景色。日本的就是在小地方做出的精致。下面这个荷花不是在一个荷花池里，而是在一个像花坛大小的人造区域中种植的。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejiniwa-hehua.jpg" alt="0503-himejiniwa-hehua.jpg"></p><hr><h1 id="5月3日-–-姬路市立美术馆"><a href="#5月3日-–-姬路市立美术馆" class="headerlink" title="5月3日 – 姬路市立美术馆"></a>5月3日 – 姬路市立美术馆</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>姫路市立美術館（ひめじびしりつじゅつかん）　</p>            <i class="fa fa-quote-right"></i>          </blockquote><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejibijutukan-gate-2.jpg" alt="0503-himejibijutukan-gate-2.jpg"></p><p>逛完了庭院竟然下起来大雨，正好我们下一站是姬路美术馆，即可躲雨又能熏陶一下艺术气息。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejibijutukan-gate.jpg" alt="0503-himejibijutukan-gate.jpg"></p><p>这次美术馆的展览，主要是以蜡笔为元素的展览<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejibijutukan-color-pen.jpg" alt="0503-himejibijutukan-color-pen.jpg"></p><p>可惜展览馆内是不让拍照的，大家有机会可以自行游玩吧<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0503-himejibijutukan-color-pen-2.jpg" alt="0503-himejibijutukan-color-pen-2.jpg"></p><hr><h1 id="5月4号-–-奈良"><a href="#5月4号-–-奈良" class="headerlink" title="5月4号 – 奈良"></a>5月4号 – 奈良</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>奈良（なら）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>女王大人说一定要去奈良玩鹿，好吧，于是行程中就多了奈良。<br>除了奈良站没走多远，就看到这个奈良鹿的大人偶。这家伙肯定是累了，一屁股靠在了垃圾桶上，当时就把我们笑翻了。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0504-nara-shika-ningyo.jpg" alt="0504-nara-shika-ningyo.jpg"></p><p>这个逗逼的正面<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0504-nara-shika-ningyo-front.jpg" alt="0504-nara-shika-ningyo-front.jpg"></p><p>想必去过京都周围的，都会去奈良玩吧。相比上次去的时候没有人，这次真是人山人海。直接变成的后果就是，鹿都被喂饱了，根本不吃给的东西。哎，其实还是怀念上次被鹿满世界追着跑的感觉。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0504-nara-shika.jpg" alt="0504-nara-shika.jpg"></p><p>所以，最后买的鹿饼都为了这群鱼了，比鹿疯狂多了，还好它们不能上岸 &gt;_&lt;<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0504-nara-fish.jpg" alt="0504-nara-fish.jpg"></p><p>感觉这次旅行对庭院和植物情有独钟，所以，既然来了春日大社，就顺便来了旁边的万叶植物园。说实话，刚刚去了姬路的好古园，所以，这里的景观明显比好古园的精致度差了很多。所以就当刷景点了，不给大家分享太多照片了。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0504-nara-tree.jpg" alt="0504-nara-tree.jpg"></p><p>完了一天，回家，坐着JR回家，车窗中的日落<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0504-nara-return.jpg" alt="0504-nara-return.jpg"></p><p>逛了一天，两人都快饿疯了，吃吃吃，鸡食堂，这名字，不懂日语随便进都行，哈哈<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0504-kobe-dinner.jpg" alt="0504-kobe-dinner.jpg"></p><hr><h1 id="5月5号-–-岡山城"><a href="#5月5号-–-岡山城" class="headerlink" title="5月5号 – 岡山城"></a>5月5号 – 岡山城</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>岡山城（おかやまじょう）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>为何这次要沿着濑户内海游玩呢，当然，最主要的原因还是因为这张票。刚好最近关西地区的旅游局准备了这样的一份旅行票套餐，其中可以自由乘坐岡山、倉敷之间的JR，而且包含了倉敷、岡山所有景点的门票，11000日元，三天的行程。完全符合我们这次旅行的期待。于是我们的濑户内海北岸的主要三天游就围绕这份套餐开始啦<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-ticket.jpg" alt="0505-okayama-ticket.jpg"></p><p>所以，第一站就是「岡山」<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-station.jpg" alt="0505-okayama-station.jpg"></p><p>出了冈山站之后，套餐里面直接包含了冈山站到刚山城的巴士，就是这辆电车。竟然是有轨电车，我竟然是头一次坐有轨电车。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-bus.jpg" alt="0505-okayama-bus.jpg"></p><p>下了电车，基本上步行就可以到所有的景观。当然，在去冈山城路上，我不得不提到这位买东西的小哥！！头一次在日本见到这种类型的叫卖小哥，真的是太会做生意了，看到我们拍了照片，就各种上来和我们搭讪。最后还是盛情难却的买了他的团子（据说是京都的团子。。结果我跑来冈山买，呵呵呵了~）<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-seller.jpg" alt="0505-okayama-seller.jpg"></p><p>毕竟去过大阪天守阁，也去过姬路城，比起前两位的宏伟，冈山城可以说更加迷你。基本上大家都是一个格局，一个风格。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-city.jpg" alt="0505-okayama-city.jpg"></p><p>里面的各种装饰很有意思，让我各种想起火影忍者的画面<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-yin.jpg" alt="0505-okayama-yin.jpg"></p><p>逛完了冈山城，河对面就是下一站，冈山后乐园</p><hr><h1 id="5月5日-–-岡山後楽園"><a href="#5月5日-–-岡山後楽園" class="headerlink" title="5月5日 – 岡山後楽園"></a>5月5日 – 岡山後楽園</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>岡山後楽園（おかやまこうらくえん）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-gorakuen.jpg" alt="0505-okayama-gorakuen.jpg"></p><p>冈山后乐园感觉像是一个公园式的庭院，面积比普通的日本庭院大了很多，而且，有非常多的宽阔的地域。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-gorakuen-overview.jpg" alt="0505-okayama-gorakuen-overview.jpg"></p><p>当然，大中有小，小中有大，各种小湖流水，景色清幽<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-gorakuen-lake.jpg" alt="0505-okayama-gorakuen-lake.jpg"></p><p>如果说冈山什么出名，那一定不能不提到大家都听说过的，桃太郎！<br>感觉桃太郎对于冈山，就像是奈良的鹿，熊本的くまモン是相同的存在。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-momotarou.jpg" alt="0505-okayama-momotarou.jpg"></p><p>连井盖都是桃太郎，我也真是 -_-||<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-water-cover.jpg" alt="0505-okayama-water-cover.jpg"></p><p>冈山逛得差不多了，下一站是仓敷。回去冈山站的公交，竟然是做了一个特别版<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-okayama-tama-bus.jpg" alt="0505-okayama-tama-bus.jpg"></p><p>传说的「たま（tama）電車」，真是幸运~~</p><hr><h1 id="5月5号-–-仓敷到着"><a href="#5月5号-–-仓敷到着" class="headerlink" title="5月5号 – 仓敷到着"></a>5月5号 – 仓敷到着</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>倉敷（くらしき）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>一路坐着JR的自由席，顺顺利利的来到了仓敷<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-kurasiki-eki.jpg" alt="0505-kurasiki-eki.jpg"></p><p>而我们所住的宾馆，就是车站门口，对的，正门口，走路10秒钟的这个大楼<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-kurasiki-apa-hotel.jpg" alt="0505-kurasiki-apa-hotel.jpg"></p><p>仓敷站门口的广场<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0505-kurasiki-eki-square.jpg" alt="0505-kurasiki-eki-square.jpg"></p><p>逛了一天的仓敷，实在是累了，于是直接回宾馆休息啦<br>说实话，这个アパホテル的实际情况着实一般。<br>反正是睡个觉，太累了就不挑了。</p><hr><h1 id="5月6号-–-雨中乱逛仓敷"><a href="#5月6号-–-雨中乱逛仓敷" class="headerlink" title="5月6号 – 雨中乱逛仓敷"></a>5月6号 – 雨中乱逛仓敷</h1><p>没想到刚刚来到仓敷，就赶上个雨天，下的这个大。然后，我们发现了仓敷站后面，竟然是outlet。我勒个去，这购物的设定也太明显了。。。<br>但是，毕竟是下雨，于是我们就顺(wu)其(ke)自(nai)然(he)着去逛逛了，然后。。。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0506-kurasiki-shopping.jpg" alt="0506-kurasiki-shopping.jpg"></p><p>这广告牌，亮瞎双眼。。。。我回去点眼药了。。。</p><p>下午看雨小点了，于是我们开始闲逛美观地区，顺着恵比寿通り乱走<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0506-kurasiki-ebisu.jpg" alt="0506-kurasiki-ebisu.jpg"></p><p>然后糊里糊涂的逛到了阿智神社，这个就是传说的「阿智の藤」，一棵500多年的古树。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0506-kurasiki-achinotou.jpg" alt="0506-kurasiki-achinotou.jpg"></p><p>这就是阿智神社，其实是一个不太大的庭院，在美观地区的一座小山上，一路上很清幽<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0506-kurasiki-achijinjia.jpg" alt="0506-kurasiki-achijinjia.jpg"></p><p>顺着阿智神社的山路下来，就是美观地区的小巷，为啥有来到丽江的感觉<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0506-kurasiki-bikanchiku.jpg" alt="0506-kurasiki-bikanchiku.jpg"></p><p>周围的各种小店都很精致，其中发现了MT的专卖店，小宝库一个，女王大人已经失去理智了。。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0506-kurasiki-MT.jpg" alt="0506-kurasiki-MT.jpg"></p><p>这里到提到一段有意思的经历，我们逛到一家布置很别致的陶制品馆，馆里只有以为白发苍苍的老太太，她静静的坐在店的中间，脸庞非常有气质。见到我们进来就很热情的攀谈起来，很惊讶我们是中国人，竟然来仓敷这里游玩（好吧，这里非常少外国人来玩么。。。）然后提到了【大原】。其实，我只知道仓敷的美观地区的重要景点之一，就是大原美术馆。我本来以为大原只是个区域名，原来是建馆人的名字。老太太带着各种崇敬之情给我们介绍大原先生。然后还说道她从小喜欢艺术，曾经家里很穷，一直有想去大原美术馆参观的愿望。大原先生为仓敷地区做出了非常大的贡献等等等。可见大原先生对仓敷人的影响有多深，以及大原美术馆对仓敷地区的重要性有多大。这种和本地人聊天的感觉，比听导游的介绍，感触深很多。</p><p>逛完了仓敷的小巷，已经很晚了，本来计划的美观地区的景点都没来得及刷，明天要忙了 &gt;_&lt;</p><hr><h1 id="5月7日-–-狂刷仓敷美观地区景点"><a href="#5月7日-–-狂刷仓敷美观地区景点" class="headerlink" title="5月7日 – 狂刷仓敷美观地区景点"></a>5月7日 – 狂刷仓敷美观地区景点</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>倉敷美観地区（くらしきびかんちく）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>昨天欠的债，今天总要还的。开始各种刷。<br>不过，刷景点还没开始，竟然遇到了仓敷的「ヒョウ猫の森」，好吧，女主人走不动了。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0507-kurasiki-nekonomori.jpg" alt="0507-kurasiki-nekonomori.jpg"></p><p>里面的猫咪都很可爱，不过，都是高冷型，只能各种热脸贴冷屁股。不过想必诸位铲屎官早已经磨练出来了 - -|<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0507-kurasiki-neko.jpg" alt="0507-kurasiki-neko.jpg"></p><p>从猫猫的世界出来，就来到了传说的大原美术馆<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0507-kurasiki-oohara.jpg" alt="0507-kurasiki-oohara.jpg"></p><p>大原美术馆分为好几个分管，分别存着不同类型的藏品，大家不要只去主馆哦。不过，馆内都是不让拍照的，所以图片基本上只留在记忆中了。</p><p>出来不远就是日本乡土玩具馆，感慨日本人的收藏耐心。这里真是的收藏了日本各个时期的各种玩具，一应俱全！！<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0507-kurasiki-gangu.jpg" alt="0507-kurasiki-gangu.jpg"></p><p>然后随便刷了一下仓敷民俗馆，就赶紧下午的行程啦</p><hr><h1 id="5月7号-–-児島"><a href="#5月7号-–-児島" class="headerlink" title="5月7号 – 児島"></a>5月7号 – 児島</h1><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>児島（こじま）</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>儿岛的第一站就是濑户内海大桥.濑户大桥是日本一座位于本州（冈山县仓敷市）到四国（香川县坂出市）之间，跨越濑户内海的桥梁，属于本州四国连络桥路网的三条路线之一。全桥由多座吊桥、斜张桥与梁桥连结，构成壮观的桥梁群。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0507-kojima-setooohashi.jpg" alt="0507-kojima-setooohashi.jpg"></p><p>实际上，来到山下可以乘坐观光的游船。可惜全程的导游，只有会日文的船长爷爷。本来听老人家的日语就是半斤八两，还赶上个带口音的，基本上就看景吧，哈哈哈。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0507-kojima-setooohashi-ship.jpg" alt="0507-kojima-setooohashi-ship.jpg"></p><p>从濑户大桥周围乘着公交车，一路飙到这个Jean Street。虽然是儿岛的景点之一，不过是不是我们来的日子不对，人好少，虽然我喜欢。为啥这个是儿岛的景点之一呢，主要是因为儿岛这个地方的牛仔布料出名，于是，专门有这么一条街，买各种原创的牛仔布料制品。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/0507-kojima-jeanstreet.jpg" alt="0507-kojima-jeanstreet.jpg"></p><p>说实话，感觉儿岛真的像是来到了日本大农村，哈哈。和大阪东京之类的发达大城市比，有明显的差别。濑户大桥很壮观，不过，其他地方就是比较小的游玩景点了。当然，本着小众游的原则，来看看是种不同的感受。</p><p>终于刷完计划中的景点了，坐上JR一路睡回神户啦</p><hr><h1 id="终篇"><a href="#终篇" class="headerlink" title="终篇"></a>终篇</h1><p>便随着旅行的结束，竟然是直接飞西雅图出差，我也真是醉了~~~</p><p>所以，小众游的主要内容便随着儿岛落幕了。总体来讲，濑户内海北岸的几个城市各有各的特点，至于是否感兴趣，就看大家的喜好了。其实，濑户内海中各种岛也很好玩，本来最开始的计划是这样。但是从大阪到高松实在是路途麻烦。而且，预定酒店的时候，高松各种找不到合适的酒店。所以，最终促成了这次北岸的游玩。濑户内海的列岛，属于濑户艺术圈之旅，下次有机会一定去玩玩。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;大多数人到日本关西，基本上都是围绕京都，奈良，大阪等等的主要旅游地段。而这次虽然依旧是关西游，但主要是一些的围绕濑户内海北岸的各种城市的小众景点游玩。姫路（ひめじ），倉敷（くらしき），岡山（おかやま）等等，让人领略到了别样的日本关西。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://winterttrgithubio.blob.core.windows.net/images/2016-07-09-travel-japan-setonaikai-north/cover.jpg&quot; alt=&quot;cover.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="旅行" scheme="http://winterttr.me/categories/%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="旅游" scheme="http://winterttr.me/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://winterttr.me/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="関西" scheme="http://winterttr.me/tags/%E9%96%A2%E8%A5%BF/"/>
    
    <category term="瀬戸内海" scheme="http://winterttr.me/tags/%E7%80%AC%E6%88%B8%E5%86%85%E6%B5%B7/"/>
    
    <category term="岡山" scheme="http://winterttr.me/tags/%E5%B2%A1%E5%B1%B1/"/>
    
    <category term="倉敷" scheme="http://winterttr.me/tags/%E5%80%89%E6%95%B7/"/>
    
    <category term="姫路" scheme="http://winterttr.me/tags/%E5%A7%AB%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Claims Identity in ASP.NET authentication Middleware</title>
    <link href="http://winterttr.me/2015/12/12/Claim-Identity-In-AspNet-Authentication-Middleware/"/>
    <id>http://winterttr.me/2015/12/12/Claim-Identity-In-AspNet-Authentication-Middleware/</id>
    <published>2015-12-12T21:10:14.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>The original motivation for this article is about following issue:</p><ul><li>how does the claim identity information persist after login in ASP.NET</li><li>why does updating of claim identity in owin context not persist in further request</li></ul><p>The <code>WIF(Windows Identity Foundation)</code> provides a Claims-Based Identity Model. And in <code>ASP.NET</code>, we can already build a Claims-Aware ASP.NET Web Application. Especially, when using with different kind of authentication middleware, <code>WIF</code> provides the same abstract layer to access the identity information across the whole asp.net pipeline context.</p><p>In this article we will talk about some detail about asp.net authentication middleware based on the <code>CookieAuthenticationMiddleware</code>. At the end, let’s discuss more about persist claim in cookie across request.</p><span id="more"></span><h1 id="Owin-Middleware"><a href="#Owin-Middleware" class="headerlink" title="Owin Middleware"></a>Owin Middleware</h1><p>Simple speaking, Owin pipeline is a link of middleware, and the request will dive into this link to the end(or short-circuited before end), and the response will pop up back though the pipeline middleware. When coming through the middleware, this gives opportunity to middleware to process and even short-circuit the whole process line.</p><pre><code>Request       /=====\        /=====\        /=====\=====&gt; |     | =====&gt; |     | =====&gt; |     |       | MW1 |        | MW2 |        | MW3 |&lt;===== |     | &lt;===== |     | &lt;===== |     | &lt;== Response       \=====/        \=====/        \=====/</code></pre><p>This diagram is a very simple and straightforward explanation about the Owin Middleware.<br>And authentication middleware if one kind of middleware that will give their effect to the request and response process.</p><figure class="highlight csharp"><figcaption><span>OwinMiddleware</span><a href="https://github.com/yreynhout/katana-clone/blob/ac4f4f48a3c56221faa554995d8b8c1940b5f838/src/Microsoft.Owin/OwinMiddleware.cs">OwinMiddleware.cs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.Owin</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">OwinMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">OwinMiddleware</span>(<span class="params">OwinMiddleware next</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">protected</span> OwinMiddleware Next &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Task <span class="title">Invoke</span>(<span class="params">IOwinContext context</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the definition the <code>OwinMiddleware</code>, there is two key pieces in code:</p><ol><li>next: reference to the next middleware in pipeline </li><li><code>Invoke</code> abstract function: this is the how this middleware could perform on the owin conext. The usually pattern would be “Before action” + “next.Invoke()” + “after action”.</li></ol><h1 id="AuthenticationMiddleware"><a href="#AuthenticationMiddleware" class="headerlink" title="AuthenticationMiddleware"></a>AuthenticationMiddleware</h1><p><code>AuthenticationMiddleware</code> is the base class for all authentication middleware. And it implement the basic pattern for the <code>Invoke</code> function for a concrete authentication middleware. Here is the flow:</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-12-12-Claim-Identity-In-AspNet-Authentication-Middleware/cookie_authentication_middleware_invoke.jpg" alt="cookie_authentication_middleware_invoke.jpg"></p><p>And more detail code is as below:</p><figure class="highlight csharp"><figcaption><span>AuthenticationMiddleware</span><a href="https://github.com/yreynhout/katana-clone/blob/ac4f4f48a3c56221faa554995d8b8c1940b5f838/src/Microsoft.Owin.Security/Infrastructure/AuthenticationMiddleware.cs">AuthenticationMiddleware.cs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">IOwinContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    AuthenticationHandler&lt;TOptions&gt; handler = CreateHandler();</span><br><span class="line">    <span class="keyword">await</span> handler.Initialize(Options, context);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">await</span> handler.InvokeAsync())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> Next.Invoke(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> handler.TeardownAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we can see that, the concrete authentication middleware will create an authentication handler and use that handler for further processing. The main logic for a authentication middleware is mainly about how the handler is implemented.<br>So let’s see the peice of code for <code>CreateHandler</code> in <code>CookieAuthenticationMiddleware</code>:</p><figure class="highlight csharp"><figcaption><span>CookieAuthenticationMiddleware</span><a href="https://github.com/yreynhout/katana-clone/blob/ac4f4f48a3c56221faa554995d8b8c1940b5f838/src/Microsoft.Owin.Security.Cookies/CookieAuthenticationMiddleware.cs">CookieAuthenticationMiddleware.cs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> AuthenticationHandler&lt;CookieAuthenticationOptions&gt; <span class="title">CreateHandler</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CookieAuthenticationHandler(_logger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AuthenticationHandler"><a href="#AuthenticationHandler" class="headerlink" title="AuthenticationHandler"></a>AuthenticationHandler</h1><p>So the main logic of authentication middleware will be focus on authentication handler. Let see a deeper graph when we expand the <code>AuthenticationHandler</code> level:</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-12-12-Claim-Identity-In-AspNet-Authentication-Middleware/authentication_handler.jpg" alt="authentication_handler.jpg"></p><p>The blue part will be the main part of how <code>AuthenticationHandler</code> works. And the red part will be how a specific authentication handler, here is <code>CookieAuthenticationHandler</code> implemented.</p><h1 id="CookieAuthenticatonHandler"><a href="#CookieAuthenticatonHandler" class="headerlink" title="CookieAuthenticatonHandler"></a>CookieAuthenticatonHandler</h1><p>We do not have the plan to dive into every detail of how CookieAuthenticationHandler implemented. So we only focus to original issue, how claim identity does the persistence underlying.</p><p>In fact, originally, i thought the claim identity which we can access via <code>User.Identity</code> will be persist in cookie. So if I update the claims in <code>User</code> context, everything will be persist ( i mean update ) into the cookie later. So I can access the updated value in later request.</p><p>However, the thing is not as I wish.</p><p>Here is the expanded version for <code>CookieAuthenticationHandler</code>:<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-12-12-Claim-Identity-In-AspNet-Authentication-Middleware/teardown.jpg" alt="teardown.jpg"></p><p>The <code>TeardownAsync</code> will perform the persistence logic from the identity, but not like we wish. From the diagram, we found that findally, the <code>CookieAuthenticationHandler</code> use the <code>ApplyResponseGrantAsync</code> to save information. And what is <code>Grant</code>?</p><p>We can refer to more detail from the implementation:</p><figure class="highlight csharp"><figcaption><span>CookieAuthenticationHandler</span><a href="https://github.com/yreynhout/katana-clone/blob/ac4f4f48a3c56221faa554995d8b8c1940b5f838/src/Microsoft.Owin.Security.Cookies/CookieAuthenticationHandler.cs#L81">CookieAuthenticationHandler.cs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ApplyResponseGrantAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    AuthenticationResponseGrant signin = Helper.LookupSignIn(Options.AuthenticationType);</span><br><span class="line">    <span class="built_in">bool</span> shouldSignin = signin != <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;&lt;&lt; ignore some code &gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shouldSignin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">new</span> CookieResponseSignInContext(</span><br><span class="line">            Context,</span><br><span class="line">            Options,</span><br><span class="line">            Options.AuthenticationType,</span><br><span class="line">            signin.Identity,</span><br><span class="line">            signin.Properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &lt;&lt;&lt; ignore some code &gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">        Response.Cookies.Append(</span><br><span class="line">            Options.CookieName,</span><br><span class="line">            cookieValue,</span><br><span class="line">            cookieOptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;&lt;&lt; ignore some code &gt;&gt;&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the code, two things need to pay attention to:</p><ol><li>the handler will save the <code>grant</code> into cookie</li><li>the action in step 1 will only happen when we can have this <code>grant</code></li></ol><p>Ok, let’s find the final piece about this <code>grant</code></p><figure class="highlight csharp"><figcaption><span>SecurityHelper</span><a href="https://github.com/yreynhout/katana-clone/blob/ac4f4f48a3c56221faa554995d8b8c1940b5f838/src/Microsoft.Owin.Security/Infrastructure/SecurityHelper.cs#L102">SecurityHelper.cs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationResponseGrant <span class="title">LookupSignIn</span>(<span class="params"><span class="built_in">string</span> authenticationType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (authenticationType == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;authenticationType&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AuthenticationResponseGrant grant = _context.Authentication.AuthenticationResponseGrant;</span><br><span class="line">    <span class="keyword">if</span> (grant == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> claimsIdentity <span class="keyword">in</span> grant.Principal.Identities)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.Equals(authenticationType, claimsIdentity.AuthenticationType, StringComparison.Ordinal))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AuthenticationResponseGrant(claimsIdentity, grant.Properties ?? <span class="keyword">new</span> AuthenticationProperties());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we finally found where the data comes from - <strong>Authentication.AuthenticationResponseGrant</strong>.</p><h1 id="AuthenticationResponseGrant"><a href="#AuthenticationResponseGrant" class="headerlink" title="AuthenticationResponseGrant"></a>AuthenticationResponseGrant</h1><p><code>Grant</code> is the concept of the information that we retreive after we do the authentication. If the cookie handler save this <strong>grant</strong> into the cookie, we need to find where is grant come from. </p><figure class="highlight csharp"><figcaption><span>AuthenticationManager</span><a href="https://github.com/yreynhout/katana-clone/blob/ac4f4f48a3c56221faa554995d8b8c1940b5f838/src/Microsoft.Owin/Security/AuthenticationManager.cs#L200">AuthenticationManager.cs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SignIn</span>(<span class="params">AuthenticationProperties properties, <span class="keyword">params</span> ClaimsIdentity[] identities</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    AuthenticationResponseRevoke priorRevoke = AuthenticationResponseRevoke;</span><br><span class="line">    <span class="keyword">if</span> (priorRevoke != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Scan the sign-outs&#x27;s and remove any with a matching auth type.</span></span><br><span class="line">        <span class="built_in">string</span>[] filteredSignOuts = priorRevoke.AuthenticationTypes</span><br><span class="line">            .Where(authType =&gt; !identities.Any(identity =&gt; identity.AuthenticationType.Equals(authType, StringComparison.Ordinal)))</span><br><span class="line">            .ToArray();</span><br><span class="line">        <span class="keyword">if</span> (filteredSignOuts.Length &lt; priorRevoke.AuthenticationTypes.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (filteredSignOuts.Length == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                AuthenticationResponseRevoke = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                AuthenticationResponseRevoke = <span class="keyword">new</span> AuthenticationResponseRevoke(filteredSignOuts);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AuthenticationResponseGrant priorGrant = AuthenticationResponseGrant;</span><br><span class="line">    <span class="keyword">if</span> (priorGrant == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        AuthenticationResponseGrant = <span class="keyword">new</span> AuthenticationResponseGrant(<span class="keyword">new</span> ClaimsPrincipal(identities), properties);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ClaimsIdentity[] mergedIdentities = priorGrant.Principal.Identities.Concat(identities).ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (properties != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Update prior properties</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> propertiesPair <span class="keyword">in</span> properties.Dictionary)</span><br><span class="line">            &#123;</span><br><span class="line">                priorGrant.Properties.Dictionary[propertiesPair.Key] = propertiesPair.Value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AuthenticationResponseGrant = <span class="keyword">new</span> AuthenticationResponseGrant(<span class="keyword">new</span> ClaimsPrincipal(mergedIdentities), priorGrant.Properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So in fact, this <code>grant</code> information is set when we call the <code>SignIn</code> function of the authenticaton manager. And if we do not call <code>SignIn</code>, the <strong>AuthenticationResponseGrant</strong> will be null. In that case, the cookie will not be updated.</p><p>And the <code>User.Identity</code> will <strong>NOT</strong> set to this authentication grant if <code>SignIn</code> is not called. That is why even update the <code>User.Identity</code> but those updated information will not take effect for any further request in asp.net.</p><p>This is also explain every detail about this stackoverflow question <a href="http://stackoverflow.com/questions/25292137/persisting-claims-across-requests">Persisting claims across requests</a></p><h1 id="How-to-Persist-Claim"><a href="#How-to-Persist-Claim" class="headerlink" title="How to Persist Claim"></a>How to Persist Claim</h1><p>After dive into such more detail from code level, let’s discuss about the original topic.</p><p>I found a solution here from the stackoverflow <a href="http://stackoverflow.com/questions/24587414/how-to-update-a-claim-in-asp-net-identity">How to update a claim in ASP.NET Identity?</a>, this solution will set the <code>AuthenticationResponseGrant</code> explicitly when try to update the claim items, this will trigger the sign in logic when <code>Teardown</code> is called.</p><p>In fact, this is one of the solution that indeed take effect. But it has a potential issue, that is, in fact, such kind of code will trigger the <strong>sign in</strong> logic underlying, and the <strong>sign in</strong> logic will update the cookie expiration time. This behavior works as you sigin in again when you explicitly set the <code>AuthenticationResponseGrant</code>. Of course, if the cookie expiration time is not a problem for your business logic, espeically when you use the <a href="https://github.com/yreynhout/katana-clone/blob/ac4f4f48a3c56221faa554995d8b8c1940b5f838/src/Microsoft.Owin.Security.Cookies/CookieAuthenticationOptions.cs#L85">SlidingExpiration</a>, everyting should be fine.</p><p>But for my business which use the cookie authentication expiration as the web application login expiration. This will be a problem, and i should not use this way to update claim information in cookie.</p><p>So based on the implementation of Katana( i do not read the latest code, so correct me if i miss something), the identity saved in cookie is not designed for dynamically update. Those claim identity in the cookie is represented as a unique identity information that <strong>binding to a specific login</strong> and it should be immutable. And, updating the claim data in cookie with <code>AuthenticationResponseGrant</code> means to a totally new login instead of updating the current login context. So all the claim data that is persisted in the cookie should not be updated within a specific login session. So that is why we can found that most of the authenticaton middleware save the claim identity information belong to the login itself to the cookie.</p><p>Yes, you may say that, how about those that do not belong to so-called “login information”, where should I save it? In fact, within asp.net project template the microsoft already provide us the way when you select “Individual Use Account”.</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-12-12-Claim-Identity-In-AspNet-Authentication-Middleware/individual_user_account.jpg" alt="individual_user_account.jpg"></p><p>I do not want to dive more code here, the magic is <code>ApplicationUserManager</code>. This manager is using <code>UserStore</code> binding to a entityframework <code>DbContext</code> object. We can use the user manager’s <code>AddClaimAsync</code>|<code>GetClaimAsync</code>|<code>RemoveClaimAsync</code> to manipulate the claim data we want to save. The user manager will sync those saved claim everytime when the next query is comming, like what we wish. And yes, i think you already guess the conclusion, user manager is using the database to save the claim identity information underlying.</p><p>And one more option, if you just want to save some data between request, and those information is not a sensitive data, such as access code, you can use the <code>Request.Cookie</code> directly, and you can see those data from chrome debug panel under <code>Resource</code> tab directly. More simple, right?</p><p>Ok, claim identity in asp.net is so a big topic so i would talk more aspect on other article, let’s end here.<br>Any question, please just reply and discuss with me :-)</p><hr><p><strong>References</strong>:</p><ul><li><a href="http://stackoverflow.com/questions/25292137/persisting-claims-across-requests">Persisting claims across requests</a></li><li><a href="http://stackoverflow.com/questions/19192428/server-side-claims-caching-with-owin-authentication">Server side claims caching with Owin Authentication</a></li><li><a href="http://stackoverflow.com/questions/24587414/how-to-update-a-claim-in-asp-net-identity">How to update a claim in ASP.NET Identity?</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;The original motivation for this article is about following issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how does the claim identity information persist after login in ASP.NET&lt;/li&gt;
&lt;li&gt;why does updating of claim identity in owin context not persist in further request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;WIF(Windows Identity Foundation)&lt;/code&gt; provides a Claims-Based Identity Model. And in &lt;code&gt;ASP.NET&lt;/code&gt;, we can already build a Claims-Aware ASP.NET Web Application. Especially, when using with different kind of authentication middleware, &lt;code&gt;WIF&lt;/code&gt; provides the same abstract layer to access the identity information across the whole asp.net pipeline context.&lt;/p&gt;
&lt;p&gt;In this article we will talk about some detail about asp.net authentication middleware based on the &lt;code&gt;CookieAuthenticationMiddleware&lt;/code&gt;. At the end, let’s discuss more about persist claim in cookie across request.&lt;/p&gt;</summary>
    
    
    
    <category term="ASP.NET" scheme="http://winterttr.me/categories/ASP-NET/"/>
    
    
    <category term="ASP.NET" scheme="http://winterttr.me/tags/ASP-NET/"/>
    
    <category term="Claims" scheme="http://winterttr.me/tags/Claims/"/>
    
    <category term="ClaimsIdentity" scheme="http://winterttr.me/tags/ClaimsIdentity/"/>
    
    <category term="WIF" scheme="http://winterttr.me/tags/WIF/"/>
    
    <category term="Authentication" scheme="http://winterttr.me/tags/Authentication/"/>
    
    <category term="AuthenticationMiddleware" scheme="http://winterttr.me/tags/AuthenticationMiddleware/"/>
    
  </entry>
  
  <entry>
    <title>无意中中了一枚transloader的兑换码</title>
    <link href="http://winterttr.me/2015/11/28/Got-the-redeem-code-for-transloader/"/>
    <id>http://winterttr.me/2015/11/28/Got-the-redeem-code-for-transloader/</id>
    <published>2015-11-28T21:25:52.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>也不枉费我关注<a href="http://sspai/">少数派</a>这么久，哈哈<br>竟然中了一枚transloader的兑换码，奖不大但是心情很好~~<br>顺便安利一下少数派，文章品质很不错~</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-28-Got-the-redeem-code-for-transloader/got_transloader_code.jpg" alt="got_transloader_code.jpg"></p><span id="more"></span><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;也不枉费我关注&lt;a href=&quot;http://sspai/&quot;&gt;少数派&lt;/a&gt;这么久，哈哈&lt;br&gt;竟然中了一枚transloader的兑换码，奖不大但是心情很好~~&lt;br&gt;顺便安利一下少数派，文章品质很不错~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://winterttrgithubio.blob.core.windows.net/images/2015-11-28-Got-the-redeem-code-for-transloader/got_transloader_code.jpg&quot; alt=&quot;got_transloader_code.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="app" scheme="http://winterttr.me/categories/app/"/>
    
    
    <category term="mac app" scheme="http://winterttr.me/tags/mac-app/"/>
    
    <category term="transloader" scheme="http://winterttr.me/tags/transloader/"/>
    
  </entry>
  
  <entry>
    <title>hexo cannot use space within tag plugin arguments</title>
    <link href="http://winterttr.me/2015/11/07/hexo-cannot-use-space-within-tag-arguments/"/>
    <id>http://winterttr.me/2015/11/07/hexo-cannot-use-space-within-tag-arguments/</id>
    <published>2015-11-07T10:44:06.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>When I use the hexo tag plugin, i found that I cannot use space within the parameter of a tag plugin, even I wrap the parameter with double quote. This confuses me a lot.</p><p>Originally, I think this may be the bug of a 3rd party tag plugin for <code>hexo</code>.<br>But after some investigation, this is the bug of hexo itself.</p><span id="more"></span><h1 id="Nunjucks"><a href="#Nunjucks" class="headerlink" title="Nunjucks"></a>Nunjucks</h1><p>Before I start to explain about the detail of this bug.<br>I indeed speed several hours to dive into the code of <code>Nunjucks</code>.</p><blockquote><p>Nunjucks<br>A rich and powerful templating language for JavaScript.</p><footer><strong>Nunjucks</strong><cite><a href="https://mozilla.github.io/nunjucks/">mozilla.github.io/nunjucks</a></cite></footer></blockquote><p><code>Nunjucks</code> is an interesting template framework for JavaScript. It has many great features and one of them used by <code>hexo</code> is the <a href="https://mozilla.github.io/nunjucks/api.html#custom-tags">custom tag</a>.</p><h1 id="Nunjucks-Custom-Tag"><a href="#Nunjucks-Custom-Tag" class="headerlink" title="Nunjucks Custom Tag"></a>Nunjucks Custom Tag</h1><p>In <code>Nunjucks</code>, you can define the <code>custom tag</code> to integrate it into whole lexical analytics system. So that it will be processed as a <code>Nunjucks</code> native supported tag.</p><p>In order to implement a <code>custom tag</code>, you need to implement two function:</p><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p><code>parse</code> is used to get the travel through lexically-marked token. So that you will analyze each part of the arguments you want for your specific <code>custom tag</code>.<br>For example, if you define a tag like below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mytag <span class="string">&quot;param1&quot;</span> <span class="string">&quot;param2&quot;</span> <span class="string">&quot;param3&quot;</span> %&#125;</span><br></pre></td></tr></table></figure><p>You need to define the <code>parse</code> function like:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">parser, nodes, lexer</span>)</span><br></pre></td></tr></table></figure><p>You use the <code>parser.nextToken()</code> to get each part of your arguments.</p><p>For example (here is the pseudo code to explain, more info refer to <a href="https://github.com/mozilla/nunjucks/blob/master/src/lexer.js">lexer.js of Nunjucks</a>:</p><ol><li>Node -&gt; { type: TOKEN_WHITESPACE, value: ‘ ‘ }</li><li>Node -&gt; { type: TOKEN_STRING, value: ‘param1’ }</li><li>Node -&gt; { type: TOKEN_WHITESPACE, value: ‘ ‘ }</li><li>Node -&gt; { type: TOKEN_STRING, value: ‘param2’ }</li><li>Node -&gt; { type: TOKEN_WHITESPACE, value: ‘ ‘ }</li><li>Node -&gt; { type: TOKEN_STRING, value: ‘param3’ }</li><li>Node -&gt; { type: TOKEN_BLOCK_END, value: ‘%}’ }</li></ol><p>Usually, we travel through each of the lexical node, save them as specific node in <code>nodes</code> parameter back to <code>Nunjucks</code> framework, and found the <code>TOKEN_BLOCK_END</code> to stop our process for any <code>custom tag</code></p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><p><code>Run</code> is used to process the information you just analyze from the <code>parse</code> function. Simply speaking, it is used to  render the parameters to its expected result for the case of <code>hexo</code></p><h1 id="Hexo-implementation-issue"><a href="#Hexo-implementation-issue" class="headerlink" title="Hexo implementation issue"></a>Hexo implementation issue</h1><p>Here is the <a href="https://github.com/hexojs/hexo/pull/1581">pull request</a> for fix the issue, i would like to talk based on it.</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-07-hexo-cannot-use-space-within-tag-arguments/pull_request_hexo_space_issue.jpg" alt="pull_request_hexo_space_issue.jpg"></p><p>We can see that, current implementation of <code>hexo</code>:</p><ol><li>simply connect all the parameter together as a string in <code>parse</code> function<br>In fact, i do not understand here, it use a array <code>args</code>, but use the string <code>+=</code> to connection all things together, which result in a string. Cannot make sure it is a expected code or the writer think he could use <code>+=</code> for array elements.</li><li>simply split the string with space and ignore all the lexical context in <code>run</code><br><code>Hexo</code> simply split all the parameter with space, this is the root cause for non space supported issue. And it pass the arguments into registered function. so we cannot use the space anymore even wrapped in a string literal.</li></ol><p>One more detail about my change:<br>If you want to use the <code>Nunjucks</code> to pass the result of <code>parse</code> correctly to <code>run</code>, you need to follow the internal structure of <code>Nunjucks</code>. Here my fix need to pass a array to <code>run</code>, instead of give the value of a <code>nodes.Literal</code> a simple javascript array object, we need to create a <code>nodes.Array</code> object, and add each of part of the tag arguments as <code>nodes.Literal</code> into it. so that <code>Nunjucks</code> can understand what we really want to pass.</p><hr><p>So here i give a fix and hope hexo will merge it ASAP.<br>In case anyone see the same issue, so I write it down here.</p><hr><p><strong>References</strong>:</p><ul><li><a href="https://mozilla.github.io/nunjucks/">Nunjucks</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;When I use the hexo tag plugin, i found that I cannot use space within the parameter of a tag plugin, even I wrap the parameter with double quote. This confuses me a lot.&lt;/p&gt;
&lt;p&gt;Originally, I think this may be the bug of a 3rd party tag plugin for &lt;code&gt;hexo&lt;/code&gt;.&lt;br&gt;But after some investigation, this is the bug of hexo itself.&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://winterttr.me/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://winterttr.me/tags/hexo/"/>
    
    <category term="tag plugin" scheme="http://winterttr.me/tags/tag-plugin/"/>
    
    <category term="Nunjucks" scheme="http://winterttr.me/tags/Nunjucks/"/>
    
  </entry>
  
  <entry>
    <title>在ios设备上使用surge配合shadowsocks开启网络全局代理</title>
    <link href="http://winterttr.me/2015/11/04/using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/"/>
    <id>http://winterttr.me/2015/11/04/using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/</id>
    <published>2015-11-04T21:06:33.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>ios上的网络代理一直是我诟病的话题之一。</p><ol><li>手机网络不能使用代理</li><li>默认的wifi下代理只能支持http</li></ol><p>随着ios9添加的新的<code>Network Extension</code>的特性，surge(<a href="https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637">App Store</a>)出现了，利用surge所提供给我们的功能，我们将给出一个近乎完美的全局代理方案。</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge.jpg" alt="surge.jpg"></p><span id="more"></span><h1 id="Surge是什么"><a href="#Surge是什么" class="headerlink" title="Surge是什么"></a>Surge是什么</h1><p>Surge是一个ios网络包抓取分析工具，它是基于ios9中<code>Network Extension</code>和<code>VPN</code>的新特性而来。<br>Surge是一个基于<code>规则(Rule)</code>的可配置型工具，我们可以利用Surge在ios网络层中添加代理，这样可以将ios设备的很多网络数据进行截获，从而实现对网络数据的分析和采集。</p><p>如果大家在windows上经常发开http程序的话，想必著名的<code>fiddler</code>大家一定不会陌生，在利用代理进行网络数据包分析方面，Surge可以说与<code>fiddler</code>的做法是很相似的。</p><p>如果说surge的初衷，还是一个网络包抓取和分析工具的话，它的基于<code>规则</code>的数据截获和转发能力，给我们提供了非常好的网络代理功能。<br>如果Surge可以长久的存活下去的话，想必一定是将来一个非常有效的ios设备网络代理工具。</p><p>如果想了解surge的具体细节，可以参考官方的主页介绍 <a href="http://surge.run/">surge.run</a>。</p><h1 id="Surge配置界面"><a href="#Surge配置界面" class="headerlink" title="Surge配置界面"></a>Surge配置界面</h1><p>Surge并不是一个打开即可以使用的工具，它是一个高可配置的工具。<br>打开Surge之后，我们只有一个默认的配置文件。<br>我们可以看到，默认的配置文件是所有的网络都是直接进行访问(all to Direct)。</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge-first-open.jpg" alt="surge-first-open.jpg"></p><h2 id="编辑已有配置"><a href="#编辑已有配置" class="headerlink" title="编辑已有配置"></a>编辑已有配置</h2><p>点击<code>Edit</code>之后，我们可以进行更多的设置</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_edit.jpg" alt="surge_edit.jpg"></p><p>对于已有的文件，我们可以更改名称，添加更多的代理，添加规则</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_edit_existing_config.jpg" alt="surge_edit_existing_config.jpg"></p><h2 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h2><p>这个是代理设置界面，在这里，可以添加三种类型的代理，<code>http</code>|<code>https</code>|<code>socks5</code>。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_proxy.jpg" alt="surge_proxy.jpg"></p><p>我们发现，这里并没有我们所需要的<code>shadowsocks</code>。是的，<code>shadowsocks</code>在界面似乎不可以直接添加，只能通过直接编辑配置文件，添加custom类型的代理。我们随后会说到。</p><h2 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h2><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_rule.jpg" alt="surge_rule.jpg"><br>在规则配置界面中，可以添加三种很多种不同的预定义类型的规则</p><ul><li>domain: 域名完全匹配</li><li>suffix: 匹配域名的结尾部分</li><li>keyword: 域名中包含这个关键字</li><li>ip: 如果请求的ip地址在范围中， 使用ip加mask的形式，例如：<code>192.168.1.1/24</code></li><li>GeoIP: 基于ip的地理位置，例如<code>CN(中国)</code>，<code>US(美国)</code>等等</li></ul><p>我们添加了规则之后，可以选择当数据包满足规则的时候如何处理：</p><ul><li>DIRECT: 也就是我们的直连，必经过任何转发，用于访问国内网络</li><li>REJECT: 拒接链接，比较多的是拦截特定的包，例如广告请求</li><li></li></ul><h2 id="网络下载配置文件"><a href="#网络下载配置文件" class="headerlink" title="网络下载配置文件"></a>网络下载配置文件</h2><p>我们知道，很多时候，大家对于手工配置上文提到的这些东西，是很闲麻烦的。<br>所以，网络下载配置文件也是surge非常人性化的feature，我们可以通过URL直接下载surge的配置文件，让他人的东西劳动成果很快的为我们所用。<br>这里分享一个很不错的配置文件，源自<code>surge.pm</code>网站。</p><p>在<code>编辑已有配置</code>中，选择<code>Download configuration from URL</code>，然后添加</p><blockquote><p><a href="http://surge.pm/main.conf">http://surge.pm/main.conf</a></p></blockquote><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_download.jpg" alt="surge_download.jpg"></p><h2 id="更改shadowsocks配置"><a href="#更改shadowsocks配置" class="headerlink" title="更改shadowsocks配置"></a>更改shadowsocks配置</h2><p>我们上文提到的配置文件中，已经为我们添加了shadowsocks的代理，不过，添加的代理只是例子，不能使用，我们需要利用上面提到的更改配置文件的办法，更改这个代理到我们自己的shadowsocks服务器的配置。</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_shadowsocks.jpg" alt="surge_shadowsocks.jpg"></p><ul><li>server: 更改为自己的ss服务器的地址</li><li>port: 为端口号</li><li>Username: 直接被当成了ss的加密方式来使用了，不再作为用户名</li><li>password: ss的登录密码</li></ul><p>这样就可以直接使用这个配置文件进行shadowsocks的网络代理了。</p><h1 id="Surge的网络监控功能"><a href="#Surge的网络监控功能" class="headerlink" title="Surge的网络监控功能"></a>Surge的网络监控功能</h1><p>我们上面提到了很多的surge的配置，当然，最原始的初衷，还是为了使用surge进行网络监控。我们可以在<code>Analytics</code>选卡中看到</p><h2 id="请求解析"><a href="#请求解析" class="headerlink" title="请求解析"></a>请求解析</h2><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_request_analytics.jpg" alt="surge_request_analytics.jpg"><br>在请求界面中，我们可以看到具体的每个请求的header和一些相关的参数。据说作者之后会加入请求的body的显示。</p><h2 id="规则分析"><a href="#规则分析" class="headerlink" title="规则分析"></a>规则分析</h2><p>在<code>Rule</code>界面中，我们也可以看到规则的相应情况，而且，最人性化的，我们在这里可以动态添加规则项<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge_change_rule.jpg" alt="surge_change_rule.jpg"></p><hr><p>经过上面的介绍，相比大家已经对surge的功能有了比较详细的了解，打开配置文件中，大部分的配置行都和我们之前介绍的界面相关，语法很容易理解。也希望大家多多分享自己的配置文件，服务于大家。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;ios上的网络代理一直是我诟病的话题之一。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手机网络不能使用代理&lt;/li&gt;
&lt;li&gt;默认的wifi下代理只能支持http&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随着ios9添加的新的&lt;code&gt;Network Extension&lt;/code&gt;的特性，surge(&lt;a href=&quot;https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637&quot;&gt;App Store&lt;/a&gt;)出现了，利用surge所提供给我们的功能，我们将给出一个近乎完美的全局代理方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://winterttrgithubio.blob.core.windows.net/images/2015-11-04-using-surge-with-shadowsocks-under-ios-to-enable-global-network-proxy/surge.jpg&quot; alt=&quot;surge.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="internet" scheme="http://winterttr.me/categories/internet/"/>
    
    
    <category term="surge" scheme="http://winterttr.me/tags/surge/"/>
    
    <category term="ios" scheme="http://winterttr.me/tags/ios/"/>
    
    <category term="proxy" scheme="http://winterttr.me/tags/proxy/"/>
    
    <category term="tun" scheme="http://winterttr.me/tags/tun/"/>
    
  </entry>
  
  <entry>
    <title>使用DNSPod支持基于github和gitcafe双线路的hexo博客</title>
    <link href="http://winterttr.me/2015/10/24/use-dnspod-to-support-hexo-blog-on-github-and-gitcafe/"/>
    <id>http://winterttr.me/2015/10/24/use-dnspod-to-support-hexo-blog-on-github-and-gitcafe/</id>
    <published>2015-10-24T23:39:32.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要支持双线路的博客？</p><ul><li>github国内访问速度缓慢，偶尔甚至无法访问</li><li>baidu爬虫被github禁用(<a href="https://news.ycombinator.com/item?id=9275041">外媒一撇</a>)</li><li>不想放弃github</li></ul><p>这样做可以获得什么优势：</p><ul><li>github对应国外访问，gitcafe对应国内访问，保持速度</li><li>baidu爬虫抓取gitcafe数据，不会受到github的禁用影响</li><li>双线路同一域名，在DNS服务器上实现分流，不会因为主机不同影响最终用户的访问域名</li></ul><p>在开始本文之前，强烈建议读一下我的另一篇文章<a href="http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/">从DNS到github pages自定义域名 – 漫谈域名那些事</a>，可以帮助你熟悉过程中的很多原理。</p><span id="more"></span><h1 id="更改hexo的配置文件"><a href="#更改hexo的配置文件" class="headerlink" title="更改hexo的配置文件"></a>更改hexo的配置文件</h1><p>实现github和gitcafe部署</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https:<span class="regexp">//gi</span>thub.com<span class="regexp">/winterTTr/</span>winterTTr.github.io.git</span><br><span class="line">    gitcafe: https:<span class="regexp">//gi</span>tcafe.com<span class="regexp">/winterTTr/</span>winterTTr.git</span><br></pre></td></tr></table></figure><p>这样就可以使用<code>hexo delpy</code>直接部署github和gitcafe了。</p><p>这里要说一句，github使用master分支作为静态页展示，gitcafe使用gitcafe-pages分支作为静态页展示。这点hexo的deploy里面已经很好的处理了，我们不用特别指定。</p><h1 id="申请DNSPod添加域名管理"><a href="#申请DNSPod添加域名管理" class="headerlink" title="申请DNSPod添加域名管理"></a>申请DNSPod添加域名管理</h1><p>NDSPod的域名解析服务中，提供根据线路进行不同的路由的功能是免费的，这也是为什么选择DNSPod的原因</p><p>添加了域名后，DNSPod会自动导入当前的域名下的各种记录<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-24-use-dnspod-to-support-hexo-blog-on-github-and-gitcafe/dnspod-add-domain-name.jpg" alt="dnspod-add-domain-name.jpg"></p><p>在这里我们可设置针对不同线路的CNAME记录</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-24-use-dnspod-to-support-hexo-blog-on-github-and-gitcafe/dnspod-setting-of-winterttr.jpg" alt="dnspod-setting-of-winterttr.jpg"></p><h1 id="在域名提供商更改NS记录"><a href="#在域名提供商更改NS记录" class="headerlink" title="在域名提供商更改NS记录"></a>在域名提供商更改NS记录</h1><p>我是用的是godaddy申请的域名，godaddy中NS记录不是在<code>Zone File</code>的配置下，而是点击域名旁边的下拉列表更改的<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-24-use-dnspod-to-support-hexo-blog-on-github-and-gitcafe/godaddy-ns-record.jpg" alt="godaddy-ns-record.jpg"></p><p>将其设置成DNSPod的服务器地址</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-24-use-dnspod-to-support-hexo-blog-on-github-and-gitcafe/godaddy-set-dnspod.jpg" alt="godaddy-set-dnspod.jpg"></p><h1 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h1><p>经过上面设置后，还需要等待全球DNS服务器的递归更新。</p><p>然后可以测试从不同地区的主机效果：</p><p>这里是从家里的机器：</p><blockquote><p>MacBook-Pro:~ winterTTr$ dig winterttr.me<br>; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; winterttr.me<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7737<br>;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 2, ADDITIONAL: 10</p><p>;; QUESTION SECTION:<br>;winterttr.me.INA</p><p>;; ANSWER SECTION:<br>winterttr.me.600INCNAMEwinterttr.gitcafe.io.<br>winterttr.gitcafe.io.600INA103.56.54.5</p><p>;; AUTHORITY SECTION:<br>gitcafe.io.600INNSf1g1ns1.dnspod.net.<br>gitcafe.io.600INNSf1g1ns2.dnspod.net.</p><p>;; ADDITIONAL SECTION:<br>f1g1ns1.dnspod.net.171513INA180.153.9.189<br>f1g1ns1.dnspod.net.171513INA182.140.167.166<br>f1g1ns1.dnspod.net.171513INA111.30.132.180<br>f1g1ns1.dnspod.net.171513INA113.108.80.138<br>f1g1ns1.dnspod.net.171513INA125.39.208.193<br>f1g1ns2.dnspod.net.55977INA101.226.30.224<br>f1g1ns2.dnspod.net.55977INA112.90.82.194<br>f1g1ns2.dnspod.net.55977INA115.236.137.40<br>f1g1ns2.dnspod.net.55977INA115.236.151.191<br>f1g1ns2.dnspod.net.55977INA182.140.167.188</p><p>;; Query time: 1649 msec<br>;; SERVER: 192.168.0.1#53(192.168.0.1)<br>;; WHEN: Sat Oct 24 17:45:10 2015<br>;; MSG SIZE  rcvd: 294</p></blockquote><p>然后登陆一台国外的主机：</p><blockquote><p>~$ dig winterttr.me<br>; &lt;&lt;&gt;&gt; DiG 9.9.5-3ubuntu0.4-Ubuntu &lt;&lt;&gt;&gt; winterttr.me<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 37875<br>;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</p><p>;; OPT PSEUDOSECTION:<br>; EDNS: version: 0, flags:; udp: 1280<br>;; QUESTION SECTION:<br>;winterttr.me.INA</p><p>;; ANSWER SECTION:<br>winterttr.me.600INCNAMEwinterttr.github.io.<br>winterttr.github.io.854INCNAMEgithub.map.fastly.net.<br>github.map.fastly.net.30INA103.245.222.133</p><p>;; Query time: 173 msec<br>;; SERVER: 100.72.124.100#53(100.72.124.100)<br>;; WHEN: Sat Oct 24 09:46:29 UTC 2015<br>;; MSG SIZE  rcvd: 125</p></blockquote><p>完成！~</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;为什么要支持双线路的博客？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github国内访问速度缓慢，偶尔甚至无法访问&lt;/li&gt;
&lt;li&gt;baidu爬虫被github禁用(&lt;a href=&quot;https://news.ycombinator.com/item?id=9275041&quot;&gt;外媒一撇&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不想放弃github&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做可以获得什么优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github对应国外访问，gitcafe对应国内访问，保持速度&lt;/li&gt;
&lt;li&gt;baidu爬虫抓取gitcafe数据，不会受到github的禁用影响&lt;/li&gt;
&lt;li&gt;双线路同一域名，在DNS服务器上实现分流，不会因为主机不同影响最终用户的访问域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开始本文之前，强烈建议读一下我的另一篇文章&lt;a href=&quot;http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/&quot;&gt;从DNS到github pages自定义域名 – 漫谈域名那些事&lt;/a&gt;，可以帮助你熟悉过程中的很多原理。&lt;/p&gt;</summary>
    
    
    
    <category term="internet" scheme="http://winterttr.me/categories/internet/"/>
    
    
    <category term="github page" scheme="http://winterttr.me/tags/github-page/"/>
    
    <category term="hexo" scheme="http://winterttr.me/tags/hexo/"/>
    
    <category term="github" scheme="http://winterttr.me/tags/github/"/>
    
    <category term="gitcafe" scheme="http://winterttr.me/tags/gitcafe/"/>
    
    <category term="DNS" scheme="http://winterttr.me/tags/DNS/"/>
    
    <category term="DNSPod" scheme="http://winterttr.me/tags/DNSPod/"/>
    
    <category term="baidu" scheme="http://winterttr.me/tags/baidu/"/>
    
    <category term="baidu爬虫" scheme="http://winterttr.me/tags/baidu%E7%88%AC%E8%99%AB/"/>
    
    <category term="baidu spider" scheme="http://winterttr.me/tags/baidu-spider/"/>
    
  </entry>
  
  <entry>
    <title>Python的函数参数传递：传值？引用？</title>
    <link href="http://winterttr.me/2015/10/24/python-passing-arguments-as-value-or-reference/"/>
    <id>http://winterttr.me/2015/10/24/python-passing-arguments-as-value-or-reference/</id>
    <published>2015-10-24T19:58:47.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>我想，这个标题或许是很多初学者的问题。尤其是像我这样的对C&#x2F;C++比较熟悉，刚刚进入python殿堂的朋友们<br>。C&#x2F;C++的函数参数的传递方式根深蒂固的影响这我们的思维–引用？传值？究竟是那种呢。<br>语言的特性决定了是使用的方法，那么，现在我们来探究一下python的函数参数传递方式。</p><span id="more"></span><h1 id="对象vs变量"><a href="#对象vs变量" class="headerlink" title="对象vs变量"></a>对象vs变量</h1><p>在python中，<code>类型</code>属于<code>对象</code>，<code>变量</code>是没有类型的，这正是python的语言特性，也是吸引着很多pythoner的一点。所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。所以，希望大家在看到一个python变量的时候，把<code>变量</code>和真正的<code>内存对象</code>分开。</p><blockquote><p>类型是属于对象的，而不是变量。</p></blockquote><p>这样，很多问题就容易思考了。</p><p>例如：</p><figure class="highlight python"><figcaption><span>对象vs变量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nfoo = <span class="number">1</span>   <span class="comment">#一个指向int数据类型的nfoo（再次提醒，nfoo没有类型）</span></span><br><span class="line">lstFoo = [<span class="number">1</span>]   <span class="comment">#一个指向list类型的lstFoo，这个list中包含一个整数1</span></span><br></pre></td></tr></table></figure><h1 id="可更改-mutable-与不可更改-immutable-对象"><a href="#可更改-mutable-与不可更改-immutable-对象" class="headerlink" title="可更改(mutable)与不可更改(immutable)对象"></a>可更改(mutable)与不可更改(immutable)对象</h1><p>对应于上一个概念，就必须引出另了另一概念，这就是<code>可更改（mutable）对象</code>与<code>不可更改（immutable）对象</code>。<br>对于python比较熟悉的人们都应该了解这个事实，在python中，strings, tuples, 和numbers是不可更改的对象，而list,dict等则是可以修改的对象。那么，这些所谓的可改变和不可改变影响着什么呢？</p><figure class="highlight python"><figcaption><span>可更改vs不可更改</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nfoo = <span class="number">1</span></span><br><span class="line">nfoo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">lstFoo = [<span class="number">1</span>]</span><br><span class="line">lstFoo[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>代码第2行中，内存中原始的1对象因为不能改变，于是被“抛弃”，另nfoo指向一个新的int对象，其值为2</p><p>代码第5行中，更改list中第一个元素的值，因为list是可改变的，所以，第一个元素变更为2。其实应该说，lstFoo指向一个<code>包含一个对象的数组</code>。赋值所发生的事情，是有一个新int对象被指定给lstFoo所指向的数组对象的第一个元素，但是对于lstFoo本身来说，所指向的数组对象并没有变化，只是数组对象的内容发生变化了。这个看似void*的变量所指向的对象仍旧是刚刚的那个有一个int对象的list。</p><p>如下图所示：</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-24-python-passing-arguments-as-value-or-reference/mutable-immutable-object.jpg" alt="mutable-immutable-object.jpg"></p><h1 id="Python的函数参数传递：传值？引用？"><a href="#Python的函数参数传递：传值？引用？" class="headerlink" title="Python的函数参数传递：传值？引用？"></a>Python的函数参数传递：传值？引用？</h1><p>对于变量（与对象相对的概念），其实，python函数参数传递可以理解为就是变量传值操作，用C++的方式理解，就是对void*赋值。如果这个变量的值不变，我们看似就是引用，如果这个变量的值改变，我们看着像是在赋值。有点晕是吧，我们仍旧据个例子。</p><figure class="highlight python"><figcaption><span>不可变对象参数调用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ChangeInt</span>(<span class="params"> a </span>):</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">nfoo = <span class="number">2</span> </span><br><span class="line">ChangeInt(nfoo)</span><br><span class="line"><span class="built_in">print</span> nfoo <span class="comment">#结果是2</span></span><br></pre></td></tr></table></figure><p>这时发生了什么，有一个int对象2，和指向它的变量nfoo，当传递给ChangeInt的时候，按照传值的方式，复制了变量nfoo的值，这样，a就是nfoo指向同一个Int对象了，函数中a&#x3D;10的时候，发生什么？（还记得我上面讲到的那些概念么），int是不能更改的对象，于是，做了一个新的int对象，另a指向它（但是此时，被变量nfoo指向的对象，没有发生变化），于是在外面的感觉就是函数没有改变nfoo的值，看起来像C++中的传值方式。</p><figure class="highlight python"><figcaption><span>可变对象参数调用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ChangeList</span>(<span class="params"> a </span>):</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">lstFoo = [<span class="number">2</span>]</span><br><span class="line">ChangeList(lstFoo )</span><br><span class="line"><span class="built_in">print</span> lstFoo <span class="comment">#结果是[10]</span></span><br></pre></td></tr></table></figure><p>当传递给ChangeList的时候，变量仍旧按照“传值”的方式，复制了变量lstFoo 的值，于是a和lstFoo 指向同一个对象，但是，list是可以改变的对象，对a[0]的操作，就是对lstFoo指向的对象的内容的操作，于是，这时的a[0] &#x3D; 10，就是更改了lstFoo 指向的对象的第一个元素，所以，再次输出lstFoo 时，显示[10]，内容被改变了，看起来，像C++中的按引用传递。</p><p>恩，现在是不是对python中的变量和对象的概念有了更深入的理解了呢？<br>通过我上面的解释，我想大家也可以自己搞定其他类型对象的传递问题了吧。</p><hr><p>原文写于2008年，发表在CSDN，发现文章反馈比较多，所以适当更新后重新发表在个人博客。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;我想，这个标题或许是很多初学者的问题。尤其是像我这样的对C&amp;#x2F;C++比较熟悉，刚刚进入python殿堂的朋友们&lt;br&gt;。C&amp;#x2F;C++的函数参数的传递方式根深蒂固的影响这我们的思维–引用？传值？究竟是那种呢。&lt;br&gt;语言的特性决定了是使用的方法，那么，现在我们来探究一下python的函数参数传递方式。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://winterttr.me/categories/python/"/>
    
    
    <category term="python" scheme="http://winterttr.me/tags/python/"/>
    
    <category term="arguments" scheme="http://winterttr.me/tags/arguments/"/>
    
    <category term="参数传递" scheme="http://winterttr.me/tags/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    
  </entry>
  
  <entry>
    <title>从DNS到github pages自定义域名 -- 漫谈域名那些事</title>
    <link href="http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/"/>
    <id>http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/</id>
    <published>2015-10-23T10:59:17.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在github申请一个pages之后，很多人会选择自定义域名，给自己的github pages一个属于自己的名字。<br>那么，从申请到域名到最后的github自定义域名设置，中间究竟发生了什么，本文就来说说域名那些事。</p><span id="more"></span><hr><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>域名就是一段文字，更具体地说，是一段人类容易识别的文字，它的作用很简单，就是用来给一个ip起一个人们能够记得住的名字。<br>域名是一种资源，很多时候甚至是地位财富和身份的象征，所以越来越多的geek们都趋之若鹜的申请自己的域名，我也不例外。</p><h2 id="根域"><a href="#根域" class="headerlink" title="根域"></a>根域</h2><p>我们通常知道的域名，例如<a href="http://winterttr.me/">winterttr.me</a>，其实是完整域名的缩写。 真正的全称为<a href="http://winterttr.me/">winterttr.me.</a>，请注意最后的<code>.</code>，这个就是根域。 它的现实体现为全球13台固定ip的根域服务器。 从<code>a.root-servers.net</code>到<code>m.root.servers.net</code>。</p><p>当我们在进行dns查询的时候，如果一个全新的域名从来没有进行查询，那么，最终会向这13台根域服务器进行请求。 不过，现在的浏览器已经基本上默认不再添加这个”多余”的点了，已然成为一种默认习惯。</p><p>当然，事实上，并不是真正的13台，而是13组，每一台在全球都有很多的镜像节点，所以你不用担心其中一台挂了会引起全球混乱~</p><h2 id="顶级域名-Top-Level-Domain-TLD"><a href="#顶级域名-Top-Level-Domain-TLD" class="headerlink" title="顶级域名(Top Level Domain - TLD)"></a>顶级域名(Top Level Domain - TLD)</h2><p>常用的顶级域名分为几种：<br>1 国家顶级域名，例如<code>.cn</code>,<code>.jp</code><br>2 机构顶级域名，例如<code>.com</code>,<code>.edu</code><br>3 还有其他分类</p><h2 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h2><p>这个就是我们常常能够申请到的域名，在顶级域名的左侧加上的一个自定义的文字段。据个例子： <a href="http://winterttr.me/">winterTTr.me</a>。所以，我们通常所说的域名，往往指的是这个二级域名。</p><h2 id="子域名-sbudomain-name"><a href="#子域名-sbudomain-name" class="headerlink" title="子域名(sbudomain name)"></a>子域名(sbudomain name)</h2><p>相对于上文所提到的“我们通常所说的域名”（二级域名）的基础上，又加入了子域名的概念，就是在一个域名的前面，加上新的字段，代表这个域名下的某个特定的主机或者协议。最常用的就是<code>WWW</code>协议，所以，我的子域名<code>www.winterttr.me</code>就是<code>winterttr.me</code>的<code>WWW</code>子域名。</p><hr><h1 id="有关DNS的那些事"><a href="#有关DNS的那些事" class="headerlink" title="有关DNS的那些事"></a>有关DNS的那些事</h1><p>咱们谈完了域名，那么就不得不说到DNS（Domain Name System)，DNS所承担的主要任务，就是所谓的域名解析。这些由DNS系统中的DNS服务器负责。那么，DNS服务器解析一个域名得到了什么？ – <strong>IP地址</strong></p><p>所以，域名解析的过程，说白了就是把一个人类记得住的域名变成ip网络中机器认识的ip地址。</p><p>那么，DNS服务器上都存了些啥？最主要的就是能够完成域名解析的一些记录</p><h2 id="A记录（A-record"><a href="#A记录（A-record" class="headerlink" title="A记录（A record)"></a>A记录（A record)</h2><p>A记录在DNS中的意义就是，域名到ip地址的转换。<br>所以，当我们在DNS服务器中添加一个A记录时，是告诉服务器，将某个特定的域名映射到一个ip地址。这个算是最简单直白的转换规则了。</p><h2 id="CNAME记录（CNAME-record"><a href="#CNAME记录（CNAME-record" class="headerlink" title="CNAME记录（CNAME record)"></a>CNAME记录（CNAME record)</h2><p>CNAME的意义，简单说就是别名，即将一个域名射到另一个域名（区别于A记录的ip）。所以，CNAME通常有两种用法：</p><ul><li>不同顶级域名之间的跳转<br>例如：我的域名是 <code>winterTTr.me</code>(顶级域名为<code>me</code>)。如果我希望，当我访问这个域名的时候，实际上是访问我的<code>winterTTr.github.io</code>（顶级域名为<code>io</code>）的主页时，虽然他们在不同的顶级域名，但是我可以用CNAME记录映射。</li><li>将一个子域名映射到域名<br>例如，你想当访问者输入<code>www.winterTTr.me</code>（一个<code>WWW</code>子域名）的时候，仍旧访问<code>winterTTr.me</code>这个域名所指向的内容时，可以将<code>www.winterTTr.me</code>利用CNAME记录映射到<code>winterTTr.me</code>。</li></ul><h2 id="NS记录（Name-Server）"><a href="#NS记录（Name-Server）" class="headerlink" title="NS记录（Name Server）"></a>NS记录（Name Server）</h2><p>简单来说，就是声明谁来负责解析我这个域名，指定了负责解析我这个域名的服务器的地址。这条记录赋予我们一个特殊的能力，就是，我可以让自己指定的一个DNS解析服务器，而不一定是域名提供商自带的域名解析服务器。简单来说，就是在godaddy买的域名，默认是使用godaddy的域名服务器来进行域名解析的，但是如果我想让别的server解析（例如NDSPod），而不受godaddy服务器的限制呢？那就是更改这个NS记录的内容。一般来讲，是两条记录，一条主服务器，一条副服务器。</p><h2 id="现实中的一些例子"><a href="#现实中的一些例子" class="headerlink" title="现实中的一些例子"></a>现实中的一些例子</h2><p>这个就是我的域名在<code>DNSPod</code>中的设置。</p><p><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-23-from-dns-to-github-custom-domain/dnspod-setting-of-winterttr.jpg" alt="dnspod-setting-of-winterttr.jpg"></p><p>可以看到，NS记录为dnspod的服务器域名，<code>dnspod</code>提供了一种非常方便的服务。就是可以根据不同的线路类型，进行不同的解析。图中可以看到，国内的使用gitcafe，国外的使用github，同时，baidu抓取国内线路gitcafe的内容，躲避了github封闭baidu spider的问题。</p><hr><h1 id="在godaddy花钱的时候买到了什么"><a href="#在godaddy花钱的时候买到了什么" class="headerlink" title="在godaddy花钱的时候买到了什么"></a>在godaddy花钱的时候买到了什么</h1><p>这不是废话么，买到了域名！<br>当然，除了这一串字符串之外，是什么让我们真正拥有了这些字符串使用权呢？</p><h2 id="在godaddy中配置域名的能力"><a href="#在godaddy中配置域名的能力" class="headerlink" title="在godaddy中配置域名的能力"></a>在godaddy中配置域名的能力</h2><p>话说花了钱，买了域名，为啥这个域名就是你的呢？<br>这是因为，godaddy将这个域名中的各种记录的配置权力分配了给你，于是，你可以定义域名的ip（A记录），或者将这个域名指向另一个别名（CNAME记录）。</p><h2 id="除了这些我还能做啥"><a href="#除了这些我还能做啥" class="headerlink" title="除了这些我还能做啥"></a>除了这些我还能做啥</h2><p>默认的域名，是在godaddy自带的域名解析服务器中进行的。godaddy是提供更改NS记录的权利的，所以，我们可以将这个域名解析的能力交给godaddy之外的人，这就是我如何做到使用<code>DNSPod</code>来进行域名解析的。</p><hr><h1 id="github中的自定义域名"><a href="#github中的自定义域名" class="headerlink" title="github中的自定义域名"></a>github中的自定义域名</h1><p>那么，经过上面一堆讲解，最终还是回到最实际的问题，github中的自定义域名。</p><h2 id="github中的域名支持"><a href="#github中的域名支持" class="headerlink" title="github中的域名支持"></a>github中的域名支持</h2><p>github的域名是支持A记录的，这个意思就是，github的服务器域名是个固定ip。所以，当我们需要将申请的域名给予一个自己的github.io的地址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。<br>现在github的服务器地址为：</p><ul><li>192.30.252.153</li><li>192.30.252.154</li></ul><p>如果你做了上面的操作，那意思就是，我希望把我的主域名<code>winterTTr.me</code>完全指向github.io的主页。</p><p>不过，如果你的只是想将一个子域名，例如<code>www.winterTTr.me</code>，而不是主域名<code>winterTTr.me</code>分配给你的github主页，那么，A记录会完全绑定你的主域名，所以这个场景A记录不适合。你需要在DNS服务器中添加一条CNAME记录，将子域名指向<code>winterTTr.github.io</code>，这样，当用户访问<code>WWW</code>子域名的时候，会跳转到github.io的主页上。</p><h2 id="告诉github你的域名"><a href="#告诉github你的域名" class="headerlink" title="告诉github你的域名"></a>告诉github你的域名</h2><p>在项目下建立一个CNAME文件，在其中写上给你的主页分配的域名地址。<br>这个操作的作用在哪里？</p><ol><li>当直接访问github.io主页的时候github知道redirect到哪里<br>也就是说，当你指定了CNAME之后，我们再次访问一个<code>github.io</code>的网站时，我们会发现，域名自动变成了我们制定的自定义域名。这是因为CNAME中指出了自定义域名是什么，所以，当我们访问<code>github.io</code>的时候，会触发<code>http 301</code>。</li></ol><blockquote><p>azureuser@ubuntu-jpe:~$ curl -I winterttr.github.io<br>HTTP&#x2F;1.1 301 Moved Permanently<br>Server: GitHub.com<br>Content-Type: text&#x2F;html<br>Location: <a href="http://winterttr.me/">http://winterttr.me/</a><br>X-GitHub-Request-Id: 2BF9481E:370C:8930CF:562B48F6<br>Content-Length: 178<br>Accept-Ranges: bytes<br>Date: Sat, 24 Oct 2015 09:02:36 GMT<br>Via: 1.1 varnish<br>Age: 54<br>Connection: keep-alive<br>X-Served-By: cache-nrt6130-NRT<br>X-Cache: HIT<br>X-Cache-Hits: 1<br>X-Timer: S1445677356.846925,VS0,VE0<br>Vary: Accept-Encoding</p></blockquote><p>  我们可以看到，github的服务器知道，我们需要访问的io网站已经有了别的域名，并且返回301让浏览器跳转到自定义域名。</p><ol start="2"><li>当用你的域名访问的时候github知道我去那个io里面找<br>当然，当我们直接使用自定义域名访问的时候，由于DNS服务器的配置，最终我们会访问github.io的主机，当主机收到我们的请求的时候，会拿我们http请求中的host和repository中的CNAME文件比较，从而知道，当前的域名应该访问那个具体的<code>xxx.github.io</code>的内容。</li></ol><hr><p>这基本上就是从一个从申请域名到到github.io配置后的完整故事</p><hr><p><strong>References</strong>:</p><ul><li><a href="https://technet.microsoft.com/en-us/library/cc772774(v=ws.10).aspx">How DNS Works</a></li><li><a href="https://serverfault.com/questions/419617/do-cname-records-result-in-a-second-dns-lookup?newreg=ca603855951147c98c90169583e43a68">Do CNAME records result in a second DNS lookup?</a></li><li><a href="http://halfelf.org/2012/subdomain-vs-domain/">Subdomain vs Domain</a></li><li><a href="https://en.wikipedia.org/wiki/Domain_Name_System">Domain Name System</a></li><li><a href="https://www.quora.com/What-happens-if-multiple-GitHub-Pages-repositories-all-point-to-the-same-domain-name">What happens if multiple GitHub Pages repositories all point to the same domain name?</a></li><li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">Setting up a custom domain with GitHub Pages</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;当我们在github申请一个pages之后，很多人会选择自定义域名，给自己的github pages一个属于自己的名字。&lt;br&gt;那么，从申请到域名到最后的github自定义域名设置，中间究竟发生了什么，本文就来说说域名那些事。&lt;/p&gt;</summary>
    
    
    
    <category term="internet" scheme="http://winterttr.me/categories/internet/"/>
    
    
    <category term="github page" scheme="http://winterttr.me/tags/github-page/"/>
    
    <category term="github" scheme="http://winterttr.me/tags/github/"/>
    
    <category term="gitcafe" scheme="http://winterttr.me/tags/gitcafe/"/>
    
    <category term="Domain Name" scheme="http://winterttr.me/tags/Domain-Name/"/>
    
    <category term="DNS" scheme="http://winterttr.me/tags/DNS/"/>
    
    <category term="域名" scheme="http://winterttr.me/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="域名服务器" scheme="http://winterttr.me/tags/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>emacs helm</title>
    <link href="http://winterttr.me/2015/10/10/emacs-helm/"/>
    <id>http://winterttr.me/2015/10/10/emacs-helm/</id>
    <published>2015-10-10T14:07:48.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p><code>Helm</code> has been released a long time, but I am always get used to <code>ido</code>.</p><p>But based on some article recently, and I am really like new things, so I decided to use the this <code>helm</code> package.</p><p>So, let’s start.</p><span id="more"></span><h2 id="Install-Helm"><a href="#Install-Helm" class="headerlink" title="Install Helm"></a>Install Helm</h2><p><a href="https://github.com/emacs-helm/helm">Helm Github</a> already tell many things about the install, here I want to memo down what I do.</p><p>I always use the subtree to manage the package by myself, so</p><blockquote><p>&gt; git subtree add –prefix .emacs.d&#x2F;plugins-subtree&#x2F;helm-suite&#x2F;helm –squash <a href="https://github.com/emacs-helm/helm.git">https://github.com/emacs-helm/helm.git</a> master</p></blockquote><blockquote><p>&gt; git subtree add –prefix .emacs.d&#x2F;plugins-subtree&#x2F;helm-suite&#x2F;emacs-async –squash <a href="https://github.com/jwiegley/emacs-async.git">https://github.com/jwiegley/emacs-async.git</a> master</p></blockquote><p>go the helm folder:</p><blockquote><p>&gt; make</p></blockquote><p>Before the config step, you can simply use the following command to have a test:</p><blockquote><p>&gt; .&#x2F;emacs-helm.sh</p></blockquote><p>This would be a simple test environment, and it’s very handy.<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-10-emacs-helm/helm-preview.jpg" alt="helm-preview.jpg"></p><h2 id="Basic-Config-Helm"><a href="#Basic-Config-Helm" class="headerlink" title="Basic Config Helm"></a>Basic Config Helm</h2><p>Add the package to load path and active the <code>helm</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; -*- coding: utf-8 -*-</span></span><br><span class="line">(<span class="name">wttr/plugin</span><span class="symbol">:prepend-to-load-path</span> <span class="string">&quot;helm-suite/emacs-async&quot;</span>)</span><br><span class="line">(<span class="name">wttr/plugin</span><span class="symbol">:prepend-to-load-path</span> <span class="string">&quot;helm-suite/helm&quot;</span>)</span><br><span class="line">(<span class="name">require</span> &#x27;helm-config)</span><br></pre></td></tr></table></figure><h2 id="Some-handy-config"><a href="#Some-handy-config" class="headerlink" title="Some handy config"></a>Some handy config</h2><p>Enable global <code>M-x</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">global-set-key</span> (<span class="name">kbd</span> <span class="string">&quot;M-x&quot;</span>) &#x27;helm-M-x)</span><br></pre></td></tr></table></figure><p>The default behavior of <code>Tab</code> key is not handy enough, so change it:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define-key</span> helm-map (<span class="name">kbd</span> <span class="string">&quot;&lt;tab&gt;&quot;</span>) &#x27;helm-execute-persistent-action) <span class="comment">; rebind tab to run persistent action</span></span><br><span class="line">(<span class="name">define-key</span> helm-map (<span class="name">kbd</span> <span class="string">&quot;C-i&quot;</span>) &#x27;helm-execute-persistent-action) <span class="comment">; make TAB works in terminal</span></span><br><span class="line">(<span class="name">define-key</span> helm-map (<span class="name">kbd</span> <span class="string">&quot;C-z&quot;</span>)  &#x27;helm-select-action) <span class="comment">; list actions using C-z</span></span><br></pre></td></tr></table></figure><h2 id="Some-issue"><a href="#Some-issue" class="headerlink" title="Some issue"></a>Some issue</h2><p>Still, grep under windows, here is my solution, please not that, your <code>grep</code> under windows may not support <code>--include</code> well, so remove <code>%e</code> will fix it.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">if</span> (<span class="name">executable-find</span> <span class="string">&quot;perl&quot;</span>)</span><br><span class="line">    (<span class="name">setq</span> helm-grep-default-command <span class="string">&quot;perl ~/.emacs.d/extra-bin/ack/ack-standalone.pl -Hn --no-group --no-color %p %f&quot;</span></span><br><span class="line">          helm-grep-default-recurse-command <span class="string">&quot;perl ~/.emacs.d/extra-bin/ack/ack-standalone.pl -H --no-group --no-color %p %f&quot;</span>)</span><br><span class="line">  (<span class="name">setq</span> helm-grep-default-command <span class="string">&quot;grep -a -d skip -n -e %p %f&quot;</span></span><br><span class="line">        helm-grep-default-recurse-command <span class="string">&quot;grep -a -d recurse -n -e %p %f&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="Some-handy-key"><a href="#Some-handy-key" class="headerlink" title="Some handy key"></a>Some handy key</h2><ul><li>You can insert marked candidates into current buffer with <code>C-c C-i</code></li><li>you can always switch it to vertical window with <code>C-t</code>. Running <code>C-t</code> again returns the Helm window back to horizontal and so on</li><li>You can mark candidates with <code>C-SPC</code>; this is useful when you need to perform an action on many candidates of your choice. <code>M-a</code> to select all.</li></ul><h2 id="further-more"><a href="#further-more" class="headerlink" title="further more"></a>further more</h2><p>Read this article <a href="http://tuhdo.github.io/helm-intro.html">helm-intro</a></p><hr><p><strong>References</strong>:</p><ul><li><a href="https://github.com/emacs-helm/helm">Helm Emacs Github</a></li><li><a href="http://tuhdo.github.io/helm-intro.html">A Package in a league of its own: Helm</a></li><li><a href="https://github.com/emacs-helm/helm/wiki#25-developping-using-helm-framework">Helm wiki</a></li><li><a href="http://tuhdo.github.io/helm-projectile.html">Exploring large projects with Projectile and Helm Projectile</a></li></ul><p>And also:</p><ul><li><a href="http://stackoverflow.com/questions/712132/in-html-i-can-make-a-checkmark-with-x2713-is-there-a-corresponding-x-mark">Markdown Check and cross character</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Helm&lt;/code&gt; has been released a long time, but I am always get used to &lt;code&gt;ido&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But based on some article recently, and I am really like new things, so I decided to use the this &lt;code&gt;helm&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;So, let’s start.&lt;/p&gt;</summary>
    
    
    
    <category term="emacs" scheme="http://winterttr.me/categories/emacs/"/>
    
    
    <category term="emacs" scheme="http://winterttr.me/tags/emacs/"/>
    
    <category term="helm" scheme="http://winterttr.me/tags/helm/"/>
    
  </entry>
  
  <entry>
    <title>三年签证之冲绳两日游</title>
    <link href="http://winterttr.me/2015/10/07/3-year-visa-travel-to-okinawa/"/>
    <id>http://winterttr.me/2015/10/07/3-year-visa-travel-to-okinawa/</id>
    <published>2015-10-07T16:07:17.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>对于日本旅游来讲，大多数人是不会单独去冲绳旅行的。<br>而我这次是为了日本的三年签证，所以来了一次冲绳的短期旅行。<br>因为是只有两天时间的短期旅行，所以并没有进行冲绳的深度游，不能和很多的攻略大神比。<br>这里只是记录一下旅行中的小片段，和大家分享。</p><span id="more"></span><h2 id="订购日本国内的机票"><a href="#订购日本国内的机票" class="headerlink" title="订购日本国内的机票"></a>订购日本国内的机票</h2><p>因为这次出行首先要帮老婆在神户办些事情，所以，是从神户出发的。<br>在神户机场的时候专门和机场的服务人员确认了一下，神户机场不是国际机场。所以，是没有国际直达飞机的，也就是只能进行国内航班的飞行。于是乎，体验了一下日本国内航空。</p><p>话说，小小的神户机场，竟然还有空中展台：<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/kobe-airport-deck.jpg" alt="kobe-airport-deck.jpg"></p><p>这次去日本订购的是日本ANA国内航线。订购日本国内机票的时候，才知道，原来日本的国内机票，订购的时候连护照号都不需要，只需要生日和护照姓名，然后，最后会发给你一个confirmation code。到时候，凭着护照和confirmation code就可以登记了，方便是方便，但是还是着实为这么简单的流程心虚了一下（我木有被骗吧，哈哈）。<br>虽然后来我找了半天，终于又找到了这个confirmation code的页面，对于不善于日语的同学，还是推荐把这页打出来，因为想再从ANA的网站上查到这个地方，着实不容易 &gt;_&lt;<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/ana-e-ticket.jpg" alt="ana-e-ticket.jpg"></p><p>于是乎，直接在前台拿出confirmation code的打印纸和护照，就可以顺利登机了。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/flyaway-kobe.jpg" alt="flyaway-kobe.jpg"></p><h2 id="抵达冲绳那霸机场"><a href="#抵达冲绳那霸机场" class="headerlink" title="抵达冲绳那霸机场"></a>抵达冲绳那霸机场</h2><p>飞机抵达冲绳那霸机场，非常浓重的军事气息，感觉这个机场就是军用机场分了条跑道给民用吧，哈哈<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/okinawa-airport.jpg" alt="okinawa-airport.jpg"></p><p>说实话，去之前完全没有留意到冲绳的温度，下了飞机就感觉很“暖和“，实际上过不了一会儿就开始浑身出汗，作为一个在神户被冻感冒的小盆友，我表示瞬间被蒸好了。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/naha-label.jpg" alt="naha-label.jpg"></p><p>从那霸机场去那霸市内，基本上就是依仗这个<code>ゆいレール（Yui rail)</code>。对于国人来讲，还是很容易的认识站名的，我就住在<code>美栄橋（みえばし miebashi)</code>。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/yui-rail-schedule.jpg" alt="yui-rail-schedule.jpg"></p><p><code>ゆいレール（Yui rail)</code>的票和关西地区的地铁使用的方式不太一样，不是插入闸机的，而是在闸机那里扫描二维码<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/yui-rail-ticket.jpg" alt="yui-rail-ticket.jpg"></p><p>上了车后站名还是很清楚的，大家记好发音就行，到了会有广播通知。<br>传说的<code>首里城</code>就在终点站，不过这次没有安排，对于在京都看了各种城的人来说，没有太大的兴趣跑去冲绳再看看日本的城池。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/yui-rail-station-list.jpg" alt="yui-rail-station-list.jpg"></p><p><code>冲绳那霸</code>作为一个基本上最靠近赤道的日本城市，阳光是非常充沛的，加上日本的绿化，所以城市本身还是美丽阳光的。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/naha-pic.jpg" alt="naha-pic.jpg"></p><p><code>冲绳那霸</code>还真是热啊，热啊，好热啊（重要的事情要说三遍）<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/naha-hot.jpg" alt="naha-hot.jpg"></p><p><code>冲绳那霸</code>街道随拍<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/naha-street.jpg" alt="naha-street.jpg"></p><p>终于到了酒店了<code>HOTEL ESTINATION</code>，当初定这个酒店是因为便宜，不过，基本情况还好。所有日本的酒店都是小小小，所以这个屋内大小就不纠结了。只是，我没有找到烧水壶&#x3D; &#x3D;|。这个酒店重要的在于距离<code>美栄橋（みえばし miebashi)</code>地铁站还是很近的，走路7分钟，路上还有个邮政局，方便同学们各种寄明信片。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/naha-hotel-estination.jpg" alt="naha-hotel-estination.jpg"></p><p>这里提醒一下同样三年签证的同学们：</p><blockquote><p>三年前签证回来的时候，需要酒店证明，别最后一天急忙走忘记了，在酒店前台交完钱，可以直接找酒店服务人员，要求开证明。他们估计都见多了，所以会直接拿出证明，写清时间后给你。好好收好，回国激活护照哦</p></blockquote><h2 id="无计划乱逛国际通"><a href="#无计划乱逛国际通" class="headerlink" title="无计划乱逛国际通"></a>无计划乱逛国际通</h2><p>到了宾馆开空调一个小时后，终于凉快了一些，看着时间还是挺早的，查了一下google地图，发现酒店距离<code>国际通</code>不远，所以，果然乱入了一段<code>国际通</code>乱逛的计划。其实重要是考虑，既然来了，就别再屋里呆着了，哈哈</p><p>日本是个到处都会卖萌的国家。。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/okinawa-nail-shop.jpg" alt="okinawa-nail-shop.jpg"></p><p><code>暖暮ラーメン（だんぼらーめん）</code>感觉是又一个被国人攻陷的地点，很早的时间就已经一堆人在外面排队。<br>你们别担心，我只路过看看。。。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/danbo-ramen.jpg" alt="danbo-ramen.jpg"></p><p>到达了传说的<code>国際通り</code><br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/kokusai-touri.jpg" alt="kokusai-touri.jpg"></p><p>说实话，<code>国際通り</code>给我的感觉一般，道路两面的游客很多，但是整体比较乱。两面有各种各样的商店，从免税店到土产，我是对这种类型的市场型大街不怎么感冒的，不过可能很多人喜欢逛这种”琳琅满目“的大街吧，所以，我就随便逛逛了。</p><p>冲绳这个地方，最著名的一种东西，就是。。。盐。。。<br>是的，你没听错，于是乎，就有了一个专门买盐出名的商店<code>塩屋（「しおや」じゃなくて、「ますや」だよ）</code>。<br>能把盐搞得这么有门道，我也是佩服，可以浏览一下<a href="http://www.ma-suya.net/">官网</a><br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/masuya.jpg" alt="masuya.jpg"></p><p>里面的盐真的是琳琅满目，着实佩服一下<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/masuya-naka.jpg" alt="masuya-naka.jpg"></p><p>很快就逛完了整个大街，其实还是很短的，据说1.6公里，不过考虑到我没什么兴趣，就不跟大家更多介绍了，返程回宾馆了。</p><p>于是乎，回来的路上，我真的。。。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/danbo-ramen-night.jpg" alt="danbo-ramen-night.jpg"></p><p>明天，上大餐~~水族馆伺候</p><h2 id="前往【美ら海水族館】"><a href="#前往【美ら海水族館】" class="headerlink" title="前往【美ら海水族館】"></a>前往【美ら海水族館】</h2><p>首先，你要知道，冲绳是个岛，岛上也是分很多个小城市的。<br>我们到达的叫<code>那霸</code>，在冲绳岛的最南面。我们要去的<code>美ら海水族館</code>在<code>名护市</code>，在冲绳岛的最北面，所以，我们要穿越整个海岛才可以到达 &gt;_&lt;。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/google-map-churaumi.jpg" alt="google-map-churaumi.jpg"></p><p>这个传说google地图中指出的<code>Limousine Bus</code>，就是下面站牌所说的<code>やんばる急行バス</code>。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/express-bus-station.jpg" alt="express-bus-station.jpg"></p><p>我给大家放大一下时刻表信息吧，游玩的时候一定要注意下时刻表。<br>错过了就要等下一班，非常影响行程的安排，到站后也要注意一下回来的时刻表，按照时刻表提前10分钟到站等着就好。我会说我提前到了一个小时，傻傻站了一个小时么。。。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/express-bus-schedule.jpg" alt="express-bus-schedule.jpg"></p><p>至于买票的话，是不用提前到什么售票处去买的，上车之后，会从前面的一个机器上拿一个<code>整理券（せいりけん)</code><br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/seiriken.jpg" alt="seiriken.jpg"></p><p>然后随着车的行驶，对应的<code>整理券</code>上的价格会自动变化，下车的时候拿着<code>整理券</code>和钱给司机就好。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/seiriken-price.jpg" alt="seiriken-price.jpg"></p><p>一路上的海非常美丽，没有被破坏的自然之美。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/express-bus-on-the-way.jpg" alt="express-bus-on-the-way.jpg"></p><p>天蓝蓝，水蓝蓝<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/on-the-way-blue-ocean.jpg" alt="on-the-way-blue-ocean.jpg"></p><h2 id="抵达冲绳纪念公园"><a href="#抵达冲绳纪念公园" class="headerlink" title="抵达冲绳纪念公园"></a>抵达冲绳纪念公园</h2><p>两个多小时，终于到了<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/okinawa-park.jpg" alt="okinawa-park.jpg"></p><p>我们要去的<code>美ら海水族館</code>，其实是这个<code>冲绳纪念公园</code>里面的一个景点而已。<br>整个<code>冲绳纪念公园</code>是无料的，就是免费的。着实让我惊讶一下，要是在中国，呵呵呵<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/okinawa-park-free.jpg" alt="okinawa-park-free.jpg"></p><p>后面会介绍的海豚表演等等，都是免费的户外活动，每隔一段时间都会有一次，大家可以自己安排好时间，只有<code>美ら海水族館</code>进入是需要收费的</p><p>整个<code>冲绳纪念公园</code>非常的大，我倒是感觉有时间可以入住周围的宾馆慢慢游览一番，考虑到我的行程匆忙，就不深度游了。这里是入口的广场。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/okinawa-park-square.jpg" alt="okinawa-park-square.jpg"></p><p>其实，海豚表演全世界的海洋馆基本上都有，但是，以真实的大海为背景的，却是第一次见到，这也是<code>冲绳纪念公园</code>的最大亮点吧<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/dolphin-pool.jpg" alt="dolphin-pool.jpg"></p><p>这里附上一段精彩的海豚跳跃~~</p><embed src="http://player.youku.com/player.php/sid/XMTM1NDAwNzA0MA==/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed><p>旁边还有海豚池和海象池，大家可以自己近距离观察这些可爱的动物<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/other-pool.jpg" alt="other-pool.jpg"></p><p>沿着几个池子的路线走下去，很快就能到我们的最终目标了<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/way-to-aqua.jpg" alt="way-to-aqua.jpg"></p><h2 id="美ら海水族館"><a href="#美ら海水族館" class="headerlink" title="美ら海水族館"></a>美ら海水族館</h2><p>水族馆的入口是一个高台上<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/aqua.jpg" alt="aqua.jpg"></p><p>从上面纵览整个海洋的景色，异常美丽<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/view-from-aqua.jpg" alt="view-from-aqua.jpg"></p><p>水族馆的门票是1850日元，其实水族馆的门票是可以多次进入的，所以如果真的不小心出来了还想再进去，可是可以的哈。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/aqua-ticket.jpg" alt="aqua-ticket.jpg"></p><p>水族馆其实本身的展览都是鱼，不过，毕竟不是什么专家，也就是只能看个热闹了.<br>这个还比较萌~<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/some-fish.jpg" alt="some-fish.jpg"></p><p>介绍在这里。。虽然，我也不是很关心，哈哈哈<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/some-fish-desc.jpg" alt="some-fish-desc.jpg"></p><p>水族馆里面是有一些影片表演的，据说是水族馆的人们自己收集制作的，所以既然来了，为什么不看看呢，记得好时间，总体来讲，人不算多，提前10分钟到就能有座位。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/theater-show-time.jpg" alt="theater-show-time.jpg"></p><p>整个水族馆最精彩的，当然就是拥有多项吉尼斯世界纪录的<code>鲸鲨</code>.<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/black-sea-fish.jpg" alt="black-sea-fish.jpg"></p><p>究竟有多大，近距离比较一下<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/black-sea-fish-close.jpg" alt="black-sea-fish-close.jpg"></p><p>贴个视频，大家看看最下面拍照的人，就知道这东西有多大了。</p><embed src="http://player.youku.com/player.php/sid/XMTM1NDAwODg3Ng==/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed><p>旁边就是专门的鲨鱼池，里面的东西，看着都不是善主。。这东西竟然和鲨鱼放一个池子里。。可见。。。。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/big-fish.jpg" alt="big-fish.jpg"></p><p>大家不要忽略，水族馆是还有更高一层的，在上面可以直接看到水族馆的水池里面的鱼，换一个视角，另一种感觉。看！！游过去了！！！忽然闪过各种电影画面。。。快撤<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/look-fish.jpg" alt="look-fish.jpg"></p><p>对了，忘记了，进入水族馆的时候，可以去摸海星，真的很好玩，带着小盆友去的就一定不要忘记了！！毕玩项目，可惜我当时光顾着玩，没照相，哈哈，所以此处省略XXX字。</p><p>其他的各种看不懂的鱼就不给大家贴了。。。反正我也不认识它们，它们也不认识我。<br>回那霸~~~ 还是那句话，大家看好巴士的时间</p><h2 id="环球DFS免税店"><a href="#环球DFS免税店" class="headerlink" title="环球DFS免税店"></a>环球DFS免税店</h2><p>回到<code>那霸</code>后，想想看也不是很晚。<br>既然来了，就都逛逛，发现<code>DFS环球免税店</code>果然不是我等人士应该逛的，一水的奢侈品店，话说我只是以为过来能吃点东西 &gt;_&lt;<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/DFS.jpg" alt="DFS.jpg"></p><p>还好距离不远的地方就有<code>The Daiso Sanenaha Maine Place</code>，终于可以吃顿饭了，饿屎了<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/daiso.jpg" alt="daiso.jpg"></p><p>回宾馆，今天结束。</p><h2 id="各种买买买"><a href="#各种买买买" class="headerlink" title="各种买买买"></a>各种买买买</h2><p><code>HOTEL ESTINATION</code>是要求10点退房的，而且，由于第二天的飞机票是晚上的，所以早晨起来就直接退房，去机场了。<br>在机场可以找到行李寄存处，收费的，大箱子一天好像480日元，其实还可以，于是存了箱子就上路了。</p><p>如果一天乘坐3次以上的<code>ゆいレール</code>，那就可以买一日券了，非常的划算。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/yui-rail-one-day.jpg" alt="yui-rail-one-day.jpg"></p><p>目标之一，奥特莱斯，在机场直接乘坐公交车直达哦。<br>就是下面这辆车，公交车95号<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/airport-bus-95.jpg" alt="airport-bus-95.jpg"></p><p>这里就是传说的奥特莱斯，话说，这辆公交车上都是国人，一路上坐着冲绳的破公交车加上周围一堆国人聊天，俨然已经回到祖国啦 <em>_</em><br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/outlets.jpg" alt="outlets.jpg"></p><p>买买买相信大家不感兴趣了</p><p>随后又去了<code>AEON百货</code>，说实话，这里才是屌丝的天堂，哈哈哈，就是各种乱七八糟的百货市场。<br>不过对于吃货来讲，终于吃到了觊觎很久的<code>mister donuts</code>了。<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/mister-donuts.jpg" alt="mister-donuts.jpg"></p><h2 id="回家"><a href="#回家" class="headerlink" title="回家"></a>回家</h2><p>伴随着冲程的落日，旅行也就结束啦<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-10-07-3-year-visa-travel-to-okinawa/sun.jpg" alt="sun.jpg"></p><p>提着一箱战利品回国喽~~</p><p>–</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于日本旅游来讲，大多数人是不会单独去冲绳旅行的。&lt;br&gt;而我这次是为了日本的三年签证，所以来了一次冲绳的短期旅行。&lt;br&gt;因为是只有两天时间的短期旅行，所以并没有进行冲绳的深度游，不能和很多的攻略大神比。&lt;br&gt;这里只是记录一下旅行中的小片段，和大家分享。&lt;/p&gt;</summary>
    
    
    
    <category term="旅行" scheme="http://winterttr.me/categories/%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="冲绳" scheme="http://winterttr.me/tags/%E5%86%B2%E7%BB%B3/"/>
    
    <category term="旅游" scheme="http://winterttr.me/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://winterttr.me/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="travel" scheme="http://winterttr.me/tags/travel/"/>
    
    <category term="okinawa" scheme="http://winterttr.me/tags/okinawa/"/>
    
    <category term="japan" scheme="http://winterttr.me/tags/japan/"/>
    
  </entry>
  
  <entry>
    <title>emacs exec-path is not synced with $PATH under MacOS</title>
    <link href="http://winterttr.me/2015/09/12/emacs-exec-path-is-not-synced-with-PATH-under-MacOS/"/>
    <id>http://winterttr.me/2015/09/12/emacs-exec-path-is-not-synced-with-PATH-under-MacOS/</id>
    <published>2015-09-12T16:33:16.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>I do not notice this issue when I try to use the <code>npm</code> from emacs eshell.<br>I found that the <code>npm</code> can be found from bash in <code>iTerm2</code> but cannot be found from emacs eshell.<br>Then I notice that the emacs do not sync the interal <code>PATH</code> with what you can check from <code>bash</code>.</p><span id="more"></span><p>I fact the wiki already mentioned those issues <a href="http://emacswiki.org/emacs/EmacsApp">here</a>.<br>And also, you can find from the <a href="http://stackoverflow.com/questions/16676826/making-the-path-and-other-environment-variables-available-in-emacs">stackoverflow</a> with the same question.</p><p>Here I want to tell a good package for emacs from stackoverflow:<br><a href="https://github.com/purcell/exec-path-from-shell">exec-path-from-shell</a></p><p>With simple setup, you path could be right:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">require</span> &#x27;exec-path-from-shell)</span><br><span class="line">(<span class="name">when</span> (<span class="name">memq</span> window-system &#x27;(mac ns))</span><br><span class="line">  (<span class="name">exec-path-from-shell-initialize</span>))</span><br></pre></td></tr></table></figure><p>Enjoy emacs.</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;I do not notice this issue when I try to use the &lt;code&gt;npm&lt;/code&gt; from emacs eshell.&lt;br&gt;I found that the &lt;code&gt;npm&lt;/code&gt; can be found from bash in &lt;code&gt;iTerm2&lt;/code&gt; but cannot be found from emacs eshell.&lt;br&gt;Then I notice that the emacs do not sync the interal &lt;code&gt;PATH&lt;/code&gt; with what you can check from &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="emacs" scheme="http://winterttr.me/categories/emacs/"/>
    
    
    <category term="emacs" scheme="http://winterttr.me/tags/emacs/"/>
    
    <category term="MacOS" scheme="http://winterttr.me/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>git migrate from submodule to subtree</title>
    <link href="http://winterttr.me/2015/09/08/git-migrate-from-submodule-to-subtree/"/>
    <id>http://winterttr.me/2015/09/08/git-migrate-from-submodule-to-subtree/</id>
    <published>2015-09-08T13:21:24.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>My emacs is mainly using <code>git submodule</code> to organise the packages. I do not use any package management for my emacs currently. But recently, i lose the <code>evil</code> package git repository access. That makes me to really the potential issue about <code>git-submodule</code>. Meanwhile, I found the <code>git-subtree</code>, so i decide to move all my packages from <code>git-submodule</code> to <code>git-subtree</code>.</p><span id="more"></span><h1 id="Submodule-vs-Subtree"><a href="#Submodule-vs-Subtree" class="headerlink" title="Submodule vs Subtree"></a>Submodule vs Subtree</h1><p>First, let’s talk about some differences between <code>submodule</code> and <code>subtree</code>.</p><h2 id="submodule-x3D-main-repository-SHA1-of-sub-repositories"><a href="#submodule-x3D-main-repository-SHA1-of-sub-repositories" class="headerlink" title="submodule &#x3D; main repository + SHA1 of sub repositories"></a>submodule &#x3D; main repository + SHA1 of sub repositories</h2><p>When you clone you main repository, you have all you files in your main repository and the submodule record file <code>.gitmoduless</code>.</p><p>You need to use <code>git submodule init</code> to initialize the submodle configuration and <code>git submodule update</code> will check out the exact version of the sub repository <em>from their remote git service</em>. Of course, you can do all of these in one command, <code>git clone --recursive (repository)</code>.</p><p>In fact, <code>.gitmoduless</code> only store the information of  remote repositories, such as </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">&quot;.emacs.d/plugins/ace-jump-mode&quot;</span>]</span><br><span class="line">    path = .emacs.d<span class="regexp">/plugins/</span>ace-jump-mode</span><br><span class="line">    url = https:<span class="regexp">//gi</span>thub.com<span class="regexp">/winterTTr/</span>ace-jump-mode.git</span><br><span class="line">    pushurl = git@github.com:winterTTr/ace-jump-mode.git</span><br><span class="line">[submodule <span class="string">&quot;.emacs.d/plugins/evil&quot;</span>]</span><br><span class="line">    path = .emacs.d<span class="regexp">/plugins/</span>evil</span><br><span class="line">    url = git:<span class="regexp">//gi</span>torious.org<span class="regexp">/evil/</span>evil.git</span><br><span class="line">[submodule <span class="string">&quot;.emacs.d/plugins/expand-region&quot;</span>]</span><br><span class="line">    path = .emacs.d<span class="regexp">/plugins/</span>expand-region</span><br><span class="line">    url = https:<span class="regexp">//gi</span>thub.com<span class="regexp">/magnars/</span>expand-region.el.git</span><br></pre></td></tr></table></figure><p>And git stores SHA1 of commit for all the sub repositories directly in Git’s object database. You can check the content with</p><blockquote><p>git ls-tree master:[path-to-directory-containing-submodule]</p></blockquote><p>For example:</p><blockquote><p>~ $ git ls-tree master .emacs.d&#x2F;plugins&#x2F;ace-jump-mode<br>160000 commit 8351e2df4fbbeb2a4003f2fb39f46d33803f3dac.emacs.d&#x2F;plugins&#x2F;ace-jump-mode</p></blockquote><p>So here is one of the potential issue for <code>git-submodule</code>, when you lose the access of other submodule remote git server or your remote server delete the commits with that SHA1 you want to reference, you cannot give your environment setup correctly again if you clone your main repository in new environment.</p><p>This is exact issue i met now.</p><h2 id="subtree-x3D-main-repository-snapshots-of-sub-repositoies"><a href="#subtree-x3D-main-repository-snapshots-of-sub-repositoies" class="headerlink" title="subtree &#x3D; main repository + snapshots of sub repositoies"></a>subtree &#x3D; main repository + snapshots of sub repositoies</h2><p>When you clone your repository, you will get all the code no matter you main repository and sub repositoies. In fact, all the sub repository code will be commmitted to your main repository as normal files. So, this would be like a local snapshot of the sub repository. You clone your repository and you got all you should have for your whole environment.</p><p>Even though you cannot access some of the sub repository git service, you do not need to care about that because you already have the workable snapshot in your repository. The only case you need to access those remote service is when you need to pull their latest change and merge to your local snapshots, or you want to push your local change back to sub repositories remote git server.</p><p>This gives us several benifits:</p><ol><li>you will not depends on other git service when you clone yourself. And the other contributors do not even need to know if there is a upstream repository existing.</li><li>you can make changes to your snapshot as if it is your code and you can track all the history.</li></ol><p>And what <code>git-subtree</code> do is to help you check out this snapshots and merge upstream changes and etc.</p><p>So personally, I would consider <code>git-subtree</code> as a way to manage your sub repositories.</p><h1 id="Detail-Steps"><a href="#Detail-Steps" class="headerlink" title="Detail Steps"></a>Detail Steps</h1><h2 id="Remove-submodule"><a href="#Remove-submodule" class="headerlink" title="Remove submodule"></a>Remove submodule</h2><p>It’s a pity that we do not have a <code>git submodule rm</code>, so remove a submodule will be manual steps.</p><p>For a submodule, there are many places that record the relevant information, we need to clean them as expected to remove submodule gracefully:</p><ul><li><code>.gitmodules</code><br>Where your git folder and remote server is stored. Manually edit to remove submodule information.</li><li><code>.git/config</code><br>After you do the <code>git submodule init</code>, git read the information from <code>.gitmodules</code> and save it here to track local submodule. You can use <code>git submoudle deinit [submodule-path]</code> to remove that module from this file. One thing need to pay attention to, if you use <code>git module deinit</code>, it will also remove submodule from working tree.</li><li><code>.git/modules/[submodule path]</code><br>Here is where git fetch and save the remote sub module tree to. Need manually delete. If you do not delete it, it would report error when you want to add the same module as submodule again.</li><li><code>submodule file in working tree</code><br>You can simply do this by <code>rm -rf [submodule path]</code></li></ul><p>So the steps are:</p><ol><li><p>clean <code>.gitmodules</code></p><blockquote><p>Manually edit this file to remove relevant git submodule section<br>&gt; git add .gitmodules</p></blockquote></li><li><p>clean <code>.git/config</code></p><blockquote><p>manually delete submodule section in <code>.git/config</code></p></blockquote></li><li><p>clean files in <code>index/staged</code></p><blockquote><p>git rm –cached [submodule path]</p></blockquote></li><li><p>clean <code>.git/modules/[submodule path]</code></p><blockquote><p>&gt; rm -rf .git&#x2F;modules&#x2F;[submodule path]</p></blockquote></li><li><p>commit your change</p><blockquote><p>&gt; git commit -m “remove submodule xxxx”</p></blockquote></li><li><p>clean local if necessary</p><blockquote><p>&gt; rm -rf [submodule path]</p></blockquote></li></ol><p>Here is my example:</p><blockquote><p>~ $ ff .gitmodules</p><pre><code>#&lt;buffer .gitmodule&gt;</code></pre><p>~ $ git add .gitmodules<br>~ $ ff .git&#x2F;config</p><pre><code>#&lt;buffer config&gt;</code></pre><p>~ $ git rm –cached .emacs.d&#x2F;plugins&#x2F;ace-jump-mode</p><pre><code>rm &#39;.emacs.d/plugins/ace-jump-mode&#39;</code></pre><p>~ $ git status</p><pre><code>On branch masterYour branch is ahead of &#39;origin/master&#39; by 1 commit.  (use &quot;git push&quot; to publish your local commits)Changes to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)  deleted:    .emacs.d/plugins/ace-jump-mode  modified:   .gitmodules</code></pre><p>~ $ git commit -m “remove submodule ace-jump-mode”</p><pre><code>[master 24a9e7d] remove submodule ace-jump-mode Committer: winterTTr &lt;winterTTr@gmail.com&gt;</code></pre></blockquote><h2 id="Use-subtree-to-obtain-snapshot"><a href="#Use-subtree-to-obtain-snapshot" class="headerlink" title="Use subtree to obtain snapshot"></a>Use subtree to obtain snapshot</h2><p>The common process to get remote repository into subtree:</p><ol><li><p>add remote branch to local track</p><blockquote><p>&gt; git remote add ace-jump-mode <a href="https://github.com/winterTTr/ace-jump-mode.git">https://github.com/winterTTr/ace-jump-mode.git</a></p></blockquote></li><li><p>get the latest version of the code into working tree</p><blockquote><p>&gt; git subtree add –prefix .emacs.d&#x2F;plugins-subtree&#x2F;ace-jump-mode –squash ace-jump-mode master</p><pre><code>git fetch ace-jump-mode masterFrom https://github.com/winterTTr/ace-jump-mode * branch            master     -&gt; FETCH_HEAD</code></pre></blockquote></li></ol><blockquote><pre><code>Added dir &#39;.emacs.d/plugins-subtree/ace-jump-mode&#39;</code></pre></blockquote><ol start="3"><li>for further update from remote server<blockquote><p>&gt; git subtree pull –prefix .emacs.d&#x2F;plugins-subtree&#x2F;ace-jump-mode –squash ace-jump-mode</p></blockquote></li></ol><hr><p><strong>References</strong>:</p><ul><li><a href="http://longair.net/blog/2010/06/02/git-submodules-explained/">GIT SUBMODULES EXPLAINED</a></li><li><a href="https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial">Git Submodule Tutorial</a></li><li><a href="http://blog.joncairns.com/2011/10/how-to-use-git-submodules/">How to use Git submodules</a></li><li><a href="http://stackoverflow.com/questions/5798930/git-rm-cached-x-vs-git-reset-head-x">“git rm –cached x” vs “git reset head — x”?</a></li><li><a href="http://stackoverflow.com/questions/5033441/where-does-git-store-the-sha1-of-the-commit-for-a-submodule">Where does Git store the SHA1 of the commit for a submodule?</a></li><li><a href="http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule">How do I remove a Git submodule?</a></li><li><a href="https://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging">Git Tools - Subtree Merging</a></li><li><a href="http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/">Alternatives To Git Submodule: Git Subtree</a></li><li><a href="https://medium.com/@porteneuve/mastering-git-subtrees-943d29a798ec">Mastering Git subtrees</a></li><li><a href="http://git-memo.readthedocs.org/en/latest/subtree.html">Git Subtree</a></li></ul><p><strong>Markdown Tips</strong>:</p><ul><li>If you want to use <code>&lt;</code> in your markdown block, you need to escape it as <code>&amp;lt;</code></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;My emacs is mainly using &lt;code&gt;git submodule&lt;/code&gt; to organise the packages. I do not use any package management for my emacs currently. But recently, i lose the &lt;code&gt;evil&lt;/code&gt; package git repository access. That makes me to really the potential issue about &lt;code&gt;git-submodule&lt;/code&gt;. Meanwhile, I found the &lt;code&gt;git-subtree&lt;/code&gt;, so i decide to move all my packages from &lt;code&gt;git-submodule&lt;/code&gt; to &lt;code&gt;git-subtree&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="http://winterttr.me/categories/git/"/>
    
    
    <category term="git" scheme="http://winterttr.me/tags/git/"/>
    
    <category term="git-submodule" scheme="http://winterttr.me/tags/git-submodule/"/>
    
    <category term="git-subtree" scheme="http://winterttr.me/tags/git-subtree/"/>
    
  </entry>
  
  <entry>
    <title>Enable ASP.NET Web API detail error message in release</title>
    <link href="http://winterttr.me/2015/09/07/Enable-ASP-NET-Web-API-detail-error-message-in-release/"/>
    <id>http://winterttr.me/2015/09/07/Enable-ASP-NET-Web-API-detail-error-message-in-release/</id>
    <published>2015-09-07T16:24:40.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>After deploy the asp.net web api application, I found that when a error (exception) occurs, the return message would only be</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;An error has occurred.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>But when in local debug, the message would be more detail:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;An error has occurred.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ExceptionMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The remote server returned an error: (409).....&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ExceptionType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Net.WebException&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;StackTrace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)....&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>Theoretically, you should not show those detail information to your final user, no matter for detail code security, or user experience.<br>But when debugging our cloud service after deploying, we may need to figure out what happened in backend.</p><p>In fact, ASP.NET web api has a separate configuration for how the error detail is shown in different environments.</p><p>In your <code>HttpConfiguration</code>, there is a property called <code>IncludeErrorDetailPolicy</code>. Let’s check its possible value.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">//     Specifies whether error details, such as exception messages and stack traces,</span></span><br><span class="line"><span class="comment">//     should be included in error messages.</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> IncludeErrorDetailPolicy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     Use the default behavior for the host environment. For ASP.NET hosting, use</span></span><br><span class="line">    <span class="comment">//     the value from the customErrors element in the Web.config file. For self-hosting,</span></span><br><span class="line">    <span class="comment">//     use the value System.Web.Http.IncludeErrorDetailPolicy.LocalOnly.</span></span><br><span class="line">    Default = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     Only include error details when responding to a local request.</span></span><br><span class="line">    LocalOnly = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     Always include error details.</span></span><br><span class="line">    Always = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     Never include error details.</span></span><br><span class="line">    Never = <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Its comments has already show the detail, so for my case:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configuration</span>(<span class="params">IAppBuilder app</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        app.UseCloudServiceGateway();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> config = <span class="keyword">new</span> HttpConfiguration</span><br><span class="line">        &#123;</span><br><span class="line">            IncludeErrorDetailPolicy = IncludeErrorDetailPolicy.Always <span class="comment">// Add this line to enable detail mode in release</span></span><br><span class="line">        &#125;;</span><br><span class="line">        WebApiConfig.Register(config);</span><br><span class="line">        app.UseWebApi(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done~~</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;After deploy the asp.net web api application, I found that when a error (exception) occurs, the return message would only be&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;Message&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;An error has occurred.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But when in local debug, the message would be more detail:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;Message&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;An error has occurred.&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;ExceptionMessage&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;The remote server returned an error: (409).....&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;ExceptionType&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;System.Net.WebException&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;StackTrace&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)....&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="ASP.NET" scheme="http://winterttr.me/categories/ASP-NET/"/>
    
    
    <category term="C#" scheme="http://winterttr.me/tags/C/"/>
    
    <category term="ASP.NET" scheme="http://winterttr.me/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>Concurrent Reader on a specific EventHub Partition within one consumer group</title>
    <link href="http://winterttr.me/2015/09/05/Concurrent-Reader-on-a-specific-EventHub-Partition-within-one-consumer-group/"/>
    <id>http://winterttr.me/2015/09/05/Concurrent-Reader-on-a-specific-EventHub-Partition-within-one-consumer-group/</id>
    <published>2015-09-05T15:15:08.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>When using <code>Eventhub</code> in <code>Azure Service Bus</code>, there is many things you need understand, I will talk something specific about about concurrent reader on consumer group.</p><span id="more"></span><p>As <a href="http://blogs.msdn.com/controlpanel/blogs/posteditor.aspx/Event%20Hubs%20Overview">Event Hubs Overview</a> said:</p><blockquote><p>The publish&#x2F;subscribe mechanism of Event Hubs is enabled through consumer groups. A consumer group is a view (state, position, or offset) of an entire Event Hub. Consumer groups enable multiple consuming applications to each have a separate view of the event stream, and to read the stream independently at its own pace and with its own offsets. In a stream processing architecture, each downstream application equates to a consumer group. If you want to write event data to long-term storage, then that storage writer application is a consumer group. Complex event processing is performed by another, separate consumer group. You can only access partitions through a consumer group. There is always a default consumer group in an Event Hub, and you can create up to 20 consumer groups for a Standard tier Event Hub.</p></blockquote><blockquote><p>In order to consume events from an Event Hub, a consumer must connect to a partition. As mentioned previously, you always access partitions through a consumer group. <strong><font color="red">As part of the partitioned consumer model, only a single reader should be active on a partition at any one time within a consumer group.</font></strong> It is common practice when connecting directly to partitions to use a leasing mechanism in order to coordinate reader connections to specific partitions. This way, it is possible for every partition in a consumer group to have only one active reader. Managing the position in the sequence for a reader is an important task that is achieved through checkpointing. This functionality is simplified by using the EventProcessorHost class for .NET clients. EventProcessorHost is an intelligent consumer agent and is described in the following section. </p></blockquote><p>So based on the event hub documentation, we should only have <strong>ONE</strong> active reader( receiver ) on a partition within the same consumer group.</p><p>OK, you know, sometimes <em>should does not means “must”</em>. So let’s see another documentation from <code>Azure Stream Analytics</code>.</p><p><a href="http://blogs.msdn.com/controlpanel/blogs/posteditor.aspx/Azure%20Stream%20Analytics%20Preview%20limitations%20and%20known%20issues">Azure Stream Analytics Preview limitations and known issues</a>:</p><blockquote><p>Each Stream Analytics job input should be configured to have its own event-hub consumer group. <strong><font color="red">When a job contains self-join or multiple outputs, some input may be read by more than one reader, which causes the total number of readers in a single consumer group to exceed the event hub’s limit of 5 readers per consumer group.</font></strong> In this case, the query will need to be broken down into multiple queries and intermediate results routed through additional event hubs. Note that there is also a limit of 20 consumer groups per event hub. For details, see Event Hubs developer guide.</p></blockquote><p>OK, here we see that, in fact, the limitation of total number of readers in a single consumer group on a specific partition is 5.</p><p>Let’s do some code test:</p><pre><code class="csharp">[TestMethod]public void Concurrent_Readers_On_1Partition_1ConsumerGroup() &#123;    var connectionString = CloudConfigurationManager.GetSetting(&quot;ServiceBus.Eventhub.ConnectionString&quot;);    const string eventhubPath = &quot;eventhub&quot;;    var nsm = NamespaceManager.CreateFromConnectionString(connectionString);    var description = nsm.CreateEventHubIfNotExists(eventhubPath);    var builder = new ServiceBusConnectionStringBuilder(connectionString)     &#123;        TransportType = TransportType.Amqp    &#125;;    var factory = MessagingFactory.CreateFromConnectionString(builder.ToString());    var client = factory.CreateEventHubClient(eventhubPath);    var partition = description.PartitionIds[0];    var group = client.GetDefaultConsumerGroup();    try &#123;        var receiverList = new List &lt; EventHubReceiver &gt;         &#123;            group.CreateReceiver(partition),            group.CreateReceiver(partition),            group.CreateReceiver(partition),            group.CreateReceiver(partition),            group.CreateReceiver(partition),            group.CreateReceiver(partition), // we create more than 5 first and comment this line to pass the test        &#125;;        var taskFactory = new TaskFactory();        var task = (        from r in receiverList        select taskFactory.StartNew(        () = &gt;         &#123;            Task.Delay(TimeSpan.FromSeconds(1));            var msg = r.Receive();            var body = Encoding.UTF8.GetString(msg.GetBytes());            Trace.TraceInformation(            String.Format(                &quot;Receiver&#123;0&#125;: &#123;1&#125; at offset &#123;2&#125;&quot;,            receiverList.IndexOf(r),            body,            msg.Offset));        &#125;)).ToList();        Task.WaitAll(task.ToArray());    &#125; catch (Exception e)     &#123;        Trace.TraceInformation(e.Message);    &#125;&#125;```First we create more than 5 reader one a specific partition:![](https://winterttrgithubio.blob.core.windows.net/images/2015-09-05-Concurrent-Reader-on-a-specific-EventHub-Partition-within-one-consumer-group/exception-more-than-5-reader.jpg)We will received the above exception.After comments the 6th reader, and send some data to the event hub, I try to rerun the test again. Then we got the following result:&gt; vstest.executionengine.x86.exe Information: 0 : Receiver1: &#123; a : 16&#125; at offset 0vstest.executionengine.x86.exe Information: 0 : Receiver0: &#123; a : 16&#125; at offset 0vstest.executionengine.x86.exe Information: 0 : Receiver2: &#123; a : 16&#125; at offset 0vstest.executionengine.x86.exe Information: 0 : Receiver3: &#123; a : 16&#125; at offset 0vstest.executionengine.x86.exe Information: 0 : Receiver4: &#123; a : 16&#125; at offset 0So we can see that, the result is obvious, we can see the five reader can work at the same time without competing.Hope they can give you some more idea when you try to read the data from even hub directly by yourself without using `EventProcessorHost`---</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;When using &lt;code&gt;Eventhub&lt;/code&gt; in &lt;code&gt;Azure Service Bus&lt;/code&gt;, there is many things you need understand, I will talk something specific about about concurrent reader on consumer group.&lt;/p&gt;</summary>
    
    
    
    <category term="Azure" scheme="http://winterttr.me/categories/Azure/"/>
    
    
    <category term="C#" scheme="http://winterttr.me/tags/C/"/>
    
    <category term="Azure" scheme="http://winterttr.me/tags/Azure/"/>
    
    <category term="Eventhub" scheme="http://winterttr.me/tags/Eventhub/"/>
    
    <category term="Service Bus" scheme="http://winterttr.me/tags/Service-Bus/"/>
    
    <category term="Consumer Group" scheme="http://winterttr.me/tags/Consumer-Group/"/>
    
  </entry>
  
  <entry>
    <title>C# Unit Test with Microsoft Fakes</title>
    <link href="http://winterttr.me/2015/09/05/CSharp-Unit-Test-with-Microsoft-Fakes/"/>
    <id>http://winterttr.me/2015/09/05/CSharp-Unit-Test-with-Microsoft-Fakes/</id>
    <published>2015-09-05T10:43:17.000Z</published>
    <updated>2023-01-23T07:17:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>In common C# Unit test, we always meet the problem that our final application is depending on many 3rd party or system references. But for unit test, we need to separate and control the dependency libraries behaviour. One of the solution will be <code>Microsoft Fake</code>.</p><p>Here let me talk about Microsoft Fake , and how to unit test your application which depends on many system or other references.</p><span id="more"></span><h2 id="Microsoft-Fake"><a href="#Microsoft-Fake" class="headerlink" title="Microsoft Fake"></a>Microsoft Fake</h2><p><strong>Microsoft Fakes</strong> is a test framework help you isolate the code you are testing by replacing other parts of the application.<br><strong>Microsoft Fake</strong> is highly integrated with Visual Studio and you can easily start to use it with very several clicks.</p><p>Fakes come in two flavours:</p><ul><li><p>A <code>shim</code> modifies the compiled code of your application at run time so that instead of making a specified method call, it runs the shim code that your test provides. Shims can be used to replace calls to assemblies that you cannot modify, such .NET assemblies.</p></li><li><p>A <code>stub</code> replaces a class with a small substitute that implements the same interface. To use stubs, you have to design your application so that each component depends only on interfaces, and not on other components.</p></li></ul><p>A good diagram to distinguish those two:<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-09-05-CSharp-Unit-Test-with-Microsoft-Fakes/stub-shim-concept-diagram.jpg" alt="stub-shim-concept-diagram.jpg"></p><table><thead><tr><th>Comparison</th><th>Shim</th><th>Stub</th></tr></thead><tbody><tr><td>Performance</td><td>Slow ( rewrite code )</td><td>As it is ( just interface implementation )</td></tr><tr><td>Static method, seal type</td><td>&amp;#10004;</td><td>&amp;#x2717;</td></tr><tr><td>Internal Type with InternalsVisibleToAttribute</td><td>&amp;#10004;</td><td>&amp;#10004;</td></tr><tr><td>Private methods</td><td>&amp;#10004; if all the types on the method signature are visible</td><td>&amp;#x2717;</td></tr><tr><td>Interfaces and abstract methods</td><td>&amp;#x2717;</td><td>&amp;#10004;</td></tr></tbody></table><h2 id="Using-Shim"><a href="#Using-Shim" class="headerlink" title="Using Shim"></a>Using Shim</h2><p>Here let we say that we want to test a function in a <code>DemoClassLibrary</code>.</p><p>We have a class that implements something depends on <code>System</code> library.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DemoClassLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">UtcNowTick</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DateTime.UtcNow.Ticks;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>So this <code>UtcNowTick</code> is depends on the <code>DateTime</code>, and right now we want to test this function.</p><p>This is a typical scenario for us to use <code>shim</code> to test because we cannot control the behaviour of the <code>system</code> library.</p><p>First, we add the fake to the library to we want to fake.<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-09-05-CSharp-Unit-Test-with-Microsoft-Fakes/add-fakes-assembly.jpg" alt="add-fakes-assembly.jpg"></p><p>After this operation, we can find that we have a fake assembly created:<br><img src="https://winterttrgithubio.blob.core.windows.net/images/2015-09-05-CSharp-Unit-Test-with-Microsoft-Fakes/after-add-fake.jpg" alt="after-add-fake.jpg"></p><p>So right now, we have the fake assembly for system now, and we can control the behaviour of system namespace api as below:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> DemoClassLibrary;</span><br><span class="line"><span class="keyword">using</span> Microsoft.QualityTools.Testing.Fakes;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibaryTest</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">TestClass</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestFoo</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">TestMethod</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestUtcNowTick</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (ShimsContext.Create())</span><br><span class="line">            &#123;</span><br><span class="line">                System.Fakes.ShimDateTime.UtcNowGet = () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> DateTime.MinValue;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line">                <span class="keyword">var</span> tick = foo.UtcNowTick();</span><br><span class="line"></span><br><span class="line">                Assert.AreEqual(tick,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As the code show, the fake framework will add an extra code for your faked namespace (such as <code>system</code> in our demo), and all the extra code will under <code>Fakes</code> namespace.<br>We can replace function calls under <code>Fakes</code> namespace to our test implementation expected. Every type will have a <code>Shim+Typename</code> under <code>Fakes</code> for us to replace.</p><p>** There is some kinds of different scenarios which we need to test using Shim, here I list some:**</p><p>Let’s say that we have a 3rd party library like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DemoDependence</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DependenceClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _data;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DependenceClass</span>(<span class="params"><span class="built_in">string</span> data</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">StaticMethod</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;DependenceClass::StaticMethod &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">InstanceMethod</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;DependenceClass::InstanceMethod &quot;</span> + _data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And we have our application that use this library:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"><span class="keyword">using</span> DemoDependence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DemoClassLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UseDependencyInstanceMethod</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> instance = <span class="keyword">new</span> DependenceClass(</span><br><span class="line">                DateTime.UtcNow.ToString(CultureInfo.CurrentCulture));</span><br><span class="line">            <span class="keyword">return</span> instance.InstanceMethod();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UseDependencyStaticMethod</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DependenceClass.StaticMethod();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UseOneDependencyInstanceMethod</span>(<span class="params">DependenceClass d</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> d.InstanceMethod();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UseConstructor</span>(<span class="params"><span class="built_in">string</span> d</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> instance = <span class="keyword">new</span> DependenceClass(d);</span><br><span class="line">            <span class="keyword">return</span> instance.InstanceMethod();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we start our test.</p><h3 id="shim-static-function"><a href="#shim-static-function" class="headerlink" title="shim static function"></a>shim static function</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShimStaticMethod</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (ShimsContext.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        ShimDependenceClass.StaticMethod =</span><br><span class="line">            () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;my string&quot;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">        Assert.AreEqual(foo.UseDependencyStaticMethod() , <span class="string">&quot;my string&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shim-instance-function"><a href="#shim-instance-function" class="headerlink" title="shim instance function"></a>shim instance function</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShimInstanceMethod</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (ShimsContext.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        ShimDependenceClass.AllInstances.InstanceMethod =</span><br><span class="line">            @class =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;my string&quot;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">        Assert.AreEqual(foo.UseDependencyInstanceMethod(), <span class="string">&quot;my string&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">TestMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShimOneInstanceMethod</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (ShimsContext.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span> ShimDependenceClass()</span><br><span class="line">        &#123;</span><br><span class="line">            InstanceMethod = () =&gt; &#123; <span class="keyword">return</span> <span class="string">&quot;my string&quot;</span>; &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">        Assert.AreEqual(foo.UseOneDependencyInstanceMethod(d), <span class="string">&quot;my string&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shim-constructor"><a href="#shim-constructor" class="headerlink" title="shim constructor"></a>shim constructor</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShimConstructor</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (ShimsContext.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        ShimDependenceClass.ConstructorString =</span><br><span class="line">            (@this, s) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> shim = <span class="keyword">new</span> ShimDependenceClass(@this)</span><br><span class="line">                &#123;</span><br><span class="line">                    InstanceMethod = () =&gt; &#123; <span class="keyword">return</span> <span class="string">&quot;my string&quot;</span>; &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">        Assert.AreEqual(</span><br><span class="line">            foo.UseConstructor(<span class="built_in">string</span>.Empty),</span><br><span class="line">            <span class="string">&quot;my string&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Using-Stub"><a href="#Using-Stub" class="headerlink" title="Using Stub"></a>Using Stub</h2><p>Stum is typically using to implement the interface, let say we have a interface:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDependenceInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">InterfaceMethod</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And our Foo has one more function:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Hide others</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UseInterface</span>(<span class="params">IDependenceInterface i</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i.InterfaceMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The stub would be like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StubInterface</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="keyword">new</span> StubIDependenceInterface()</span><br><span class="line">    &#123;</span><br><span class="line">        InterfaceMethod = () =&gt; &#123; <span class="keyword">return</span> <span class="string">&quot;my string&quot;</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">    Assert.AreEqual(</span><br><span class="line">        foo.UseInterface(i),</span><br><span class="line">        <span class="string">&quot;my string&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Compile-warning-issue"><a href="#Compile-warning-issue" class="headerlink" title="Compile warning issue"></a>Compile warning issue</h2><p>When you use fake the <code>System</code> library, you may see the compilation warning, that is because some type cannot be fakes, you can change the fake configuration file to fixit.<br>The warning is like below:</p><blockquote><p>Warning 20 Some fakes could not be generated. For complete details, set Diagnostic attribute of the Fakes element in this file to ‘true’ and rebuild the project.</p></blockquote><p>Just shim or stub the things you really need, here is one of my example in real project:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Fakes</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/fakes/2011/&quot;</span> <span class="attr">Diagnostic</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Assembly</span> <span class="attr">Name</span>=<span class="string">&quot;Microsoft.WindowsAzure.Configuration&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;3.0.0.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">StubGeneration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Clear</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">StubGeneration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ShimGeneration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Clear</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Add</span> <span class="attr">FullName</span>=<span class="string">&quot;Microsoft.Azure.CloudConfigurationManager&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ShimGeneration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Compilation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">&quot;PlatformTarget&quot;</span>&gt;</span>x64<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Compilation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Fakes</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Other-Options"><a href="#Other-Options" class="headerlink" title="Other Options"></a>Other Options</h2><ul><li><a href="https://github.com/Moq/moq4">Moq</a> which is my favourite test framework</li></ul><hr><p><strong>References</strong>:</p><ul><li><a href="https://msdn.microsoft.com/en-us/library/hh549175.aspx">Isolating Code Under Test with Microsoft Fakes</a></li><li><a href="https://msdn.microsoft.com/en-us/library/hh549176.aspx">Using shims to isolate your application from other assemblies for unit testing</a></li><li><a href="https://msdn.microsoft.com/en-us/library/hh549174.aspx">Using stubs to isolate parts of your application from each other for unit testing</a></li></ul><p>And about markdown:</p><ul><li><a href="http://stackoverflow.com/questions/712132/in-html-i-can-make-a-checkmark-with-x2713-is-there-a-corresponding-x-mark">Markdown Check and cross character</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;In common C# Unit test, we always meet the problem that our final application is depending on many 3rd party or system references. But for unit test, we need to separate and control the dependency libraries behaviour. One of the solution will be &lt;code&gt;Microsoft Fake&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here let me talk about Microsoft Fake , and how to unit test your application which depends on many system or other references.&lt;/p&gt;</summary>
    
    
    
    <category term="C#" scheme="http://winterttr.me/categories/C/"/>
    
    
    <category term="C#" scheme="http://winterttr.me/tags/C/"/>
    
    <category term="Unit Test" scheme="http://winterttr.me/tags/Unit-Test/"/>
    
    <category term="Fake" scheme="http://winterttr.me/tags/Fake/"/>
    
  </entry>
  
  <entry>
    <title>new domain winterTTr.me</title>
    <link href="http://winterttr.me/2015/09/04/binding-new-domain/"/>
    <id>http://winterttr.me/2015/09/04/binding-new-domain/</id>
    <published>2015-09-04T17:22:32.000Z</published>
    <updated>2023-01-23T07:17:43.148Z</updated>
    
    <content type="html"><![CDATA[<p>Just register a new domain name from <a href="http://godaddy.com/">godaddy</a>, so this blog will use this new domain name as long as I can.</p><p>I have to say that the <code>git hub page custom domain manual</code> is really unclear. And thanks for that someone could give more detail.</p><p>About how to setup godaddy, here is good <a href="http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html">reference article</a>.</p><p>Done~~</p><p><strong>Let’s blog~~!</strong></p><span id="more"></span><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;Just register a new domain name from &lt;a href=&quot;http://godaddy.com/&quot;&gt;godaddy&lt;/a&gt;, so this blog will use this new domain name as long as I can.&lt;/p&gt;
&lt;p&gt;I have to say that the &lt;code&gt;git hub page custom domain manual&lt;/code&gt; is really unclear. And thanks for that someone could give more detail.&lt;/p&gt;
&lt;p&gt;About how to setup godaddy, here is good &lt;a href=&quot;http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html&quot;&gt;reference article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Done~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let’s blog~~!&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="internet" scheme="http://winterttr.me/categories/internet/"/>
    
    
    <category term="github page" scheme="http://winterttr.me/tags/github-page/"/>
    
    <category term="custom domain" scheme="http://winterttr.me/tags/custom-domain/"/>
    
    <category term="godaddy" scheme="http://winterttr.me/tags/godaddy/"/>
    
  </entry>
  
  <entry>
    <title>Common Hexo Workflow</title>
    <link href="http://winterttr.me/2015/09/04/common-hexo-workflow/"/>
    <id>http://winterttr.me/2015/09/04/common-hexo-workflow/</id>
    <published>2015-09-04T12:30:35.000Z</published>
    <updated>2023-01-23T07:17:43.148Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the list of common hexo workflow commands.</p><span id="more"></span><h2 id="Create-draft"><a href="#Create-draft" class="headerlink" title="Create draft"></a>Create draft</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft <span class="string">&quot;your article name&quot;</span></span><br><span class="line">emacs <span class="string">&quot;your article name&quot;</span></span><br></pre></td></tr></table></figure><p>After this, the draft file will be created under <code>source/_drafts</code> folder without <code>Date</code> tag added.</p><h2 id="Publish-draft"><a href="#Publish-draft" class="headerlink" title="Publish draft"></a>Publish draft</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish <span class="string">&quot;your article name&quot;</span></span><br></pre></td></tr></table></figure><p>After this, the draft will will be move to <code>source/_posts</code> and the internal <code>Date</code> flag will be updated to the publish timestamp.</p><h2 id="Test-your-post"><a href="#Test-your-post" class="headerlink" title="Test your post"></a>Test your post</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Generate all the static blog file and start the local server.</p><p>You can simply do this via alias:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h2 id="Publish-to-github-page"><a href="#Publish-to-github-page" class="headerlink" title="Publish to github page"></a>Publish to github page</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>Of course you need to config the git in site <code>_config.yml</code> file. And the hexo will publish the result to github page.</p><h2 id="Some-memo"><a href="#Some-memo" class="headerlink" title="Some memo"></a>Some memo</h2><ul><li>Manually set article digest<br>after this line in your markdown file will be hidden from the homepage.<br><code>&lt;!--more--&gt;</code></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;Here is the list of common hexo workflow commands.&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://winterttr.me/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://winterttr.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo + next done</title>
    <link href="http://winterttr.me/2015/09/04/hexo-next-done/"/>
    <id>http://winterttr.me/2015/09/04/hexo-next-done/</id>
    <published>2015-09-04T10:52:19.000Z</published>
    <updated>2023-01-23T07:17:43.148Z</updated>
    
    <content type="html"><![CDATA[<p>I think the hexo + next theme configuration should be almost done.</p><p>It takes 2 days for all the configuration and I have to say that this should be quick enough for a self build static blog.</p><p>Enable most of the feature for Next theme, which is really a good theme.</p><p>For all the configuration and environment, please refer to the <a href="https://github.com/winterTTr/winterTTr.github.io/tree/hexo-content">hexo-content</a> branch of the <a href="https://github.com/winterTTr">my github</a>.</p><span id="more"></span><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;I think the hexo + next theme configuration should be almost done.&lt;/p&gt;
&lt;p&gt;It takes 2 days for all the configuration and I have to say that this should be quick enough for a self build static blog.&lt;/p&gt;
&lt;p&gt;Enable most of the feature for Next theme, which is really a good theme.&lt;/p&gt;
&lt;p&gt;For all the configuration and environment, please refer to the &lt;a href=&quot;https://github.com/winterTTr/winterTTr.github.io/tree/hexo-content&quot;&gt;hexo-content&lt;/a&gt; branch of the &lt;a href=&quot;https://github.com/winterTTr&quot;&gt;my github&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://winterttr.me/categories/hexo/"/>
    
    
    <category term="github page" scheme="http://winterttr.me/tags/github-page/"/>
    
    <category term="hexo" scheme="http://winterttr.me/tags/hexo/"/>
    
    <category term="hexo-theme-next" scheme="http://winterttr.me/tags/hexo-theme-next/"/>
    
  </entry>
  
  <entry>
    <title>start again</title>
    <link href="http://winterttr.me/2015/09/03/start-again/"/>
    <id>http://winterttr.me/2015/09/03/start-again/</id>
    <published>2015-09-03T16:23:52.000Z</published>
    <updated>2023-01-23T07:17:43.148Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s have a new start.</p><span id="more"></span><h2 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h2><p>It is a long time, I do not write something. In fact, there is always something that feels not very satisfied when writing down something new on web. Because I need to spend too much time on formatting things. Fonts, title, format, bullet and etc, I cannot focus on writing.</p><h2 id="Now"><a href="#Now" class="headerlink" title="Now"></a>Now</h2><p>Markdown is a really good choice now.</p><p>Meanwhile, <a href="https://hexo.io/">hexo</a> is really a good framework to start from scratch again.</p><p>Comparing with <a href="https://github.com/jekyll/jekyll">Jekyll</a> and github page from raw, I think the hexo is better and more easy.</p><p>Here, I want to thanks to the <a href="https://github.com/iissnan/hexo-theme-next">Next</a> theme for hex, it is really a well prepared theme and support many things which may need U to spend a lot of times to config. Thanks again.</p><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>Let’s start again.</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;Let’s have a new start.&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://winterttr.me/categories/hexo/"/>
    
    
    <category term="life" scheme="http://winterttr.me/tags/life/"/>
    
  </entry>
  
</feed>
